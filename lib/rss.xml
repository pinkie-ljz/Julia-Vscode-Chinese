<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Please set your title]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Please set your title</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 01 Nov 2024 02:57:41 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 01 Nov 2024 02:57:36 GMT</pubDate><copyright><![CDATA[Jinze Li]]></copyright><ttl>60</ttl><dc:creator>Jinze Li</dc:creator><item><title><![CDATA[代码导航]]></title><description><![CDATA[ 
 <br><br><br>
提示：按住 Ctrl+P (快速打开) 以按名称打开任何文件。
<br>有两个命令可以让用户轻松使用快捷键在文件内外进行导航。<br>
<br>按住 Ctrl 并按 Tab 可以查看在编辑器中打开的所有文件列表。
<br>要打开其中一个文件，再次按 Tab 选择你想导航到的文件，然后释放 Ctrl 以打开它。
<br><img alt="Code Navigation" src="lib\media\image1.png"><br>或者，你可以使用 Alt+Left 和 Alt+Right 在文件和编辑位置之间导航。如果你在同一文件的不同行之间跳转，这些快捷键可以让你轻松导航到这些位置。<br><br><br>你可以按 F12 跳转到符号的定义。<br>如果你按住 Ctrl 并悬停在某个符号上，声明的预览将会出现：<br><img src="lib\media\definition.gif"><br>
提示：你可以使用 Ctrl+Click 跳转到定义，或者使用 Ctrl+Alt+Click 在侧边打开定义。
<br><br>你可以使用 Ctrl+Shift+O 在文件内导航符号。输入 : 后，符号将按类别分组。按 Up 或 Down 键导航到你想要的位置。<br><img src="lib\media\symbols.gif"><br><br>你可以使用 Ctrl+T 按符号名称打开特定符号，无论它位于哪个文件中。输入你想导航到的符号名称，然后按 Enter。<br><img alt="Open Symbol" src="lib\media\opensymbol.png">]]></description><link>src\userguide\codenavigation.html</link><guid isPermaLink="false">src/userguide/codenavigation.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:19 GMT</pubDate><enclosure url="lib\media\image1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\image1.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[调试]]></title><description><![CDATA[ 
 <br><br>Julia 扩展支持Julia 程序和应用的所有类型的调试。<br>有关检查变量、设置断点等与语言无关的一般调试功能，请查看 <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/docs/editor/debugging" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/docs/editor/debugging" target="_blank">VS Code 调试</a>。<br><br>
<br>在 VS Code 中打开一个 Julia 文件。
<br>点击 run 按钮。您将看到默认的调试器启动面板：
<br>点击 run and debug（或选择 F5）以在调试器中运行当前活动的 Julia 文件。输出将在 Julia 调试终端中显示。
<br><img alt="Debugger" src="lib\media\3.png"><br>在此例中，整个程序一次性运行并完成，没有出现问题。让我们通过在第 11 行设置一个断点来使这个示例更有用。我们只需在代码编辑器的最左侧列上单击即可：<br><img alt="Debugger" src="lib\media\4.png"><br>红点表明我们现在已经设置了一个断点。接下来，我们重新启动程序（可以通过单击 run and debug 或按 F5）。当程序到达第 11 行时，它将暂停：<br><img alt="Debugger" src="lib\media\5.png"><br>黄色行显示了如果继续运行程序将要执行的位置。我们还可以查看调用堆栈的位置和所有断点的列表。在文本编辑器顶部，我们现在看到一个工具条，包含常用调试操作的命令：Continue, Step over, Step Into, Step Out 等。 让我们单击一次 Step Over 然后单击 Step Into。我们现在在 bar 函数的第一行暂停：<br><img alt="Debugger" src="lib\media\6.png"><br> Variables 视图现在显示我们在此函数中拥有的局部变量及其当前值。当我们逐步执行程序并最终到达 bar 函数的末尾时，局部变量的列表变得更长，即我们现在还可以看到 c 和 d 的值：<br><img alt="Debugger" src="lib\media\7.png"><br>让我们在第 15 行再设置一个断点，然后继续程序直到它到达该断点。然后我们单击 Debug Console，看到如下视图：<br><img alt="Debugger" src="lib\media\8.png"><br>在此视图中，我们可以在当前函数的变量环境中计算任意合法的 Julia 代码。例如，我们可以通过运行 log(x) 来计算变量 x 的对数值：<br><img alt="Debugger" src="lib\media\10.png"><br>我们还可以在程序暂停时更改任何局部变量的值。例如，要更改 x 的值，我们可以在 Variables 窗口双击 27 旁边的 x，然后输入任意合法的 Julia 表达式。该表达式返回的值将成为 x 的新值。在以下示例中，我们将 x 的值更改为字符串：<br><img alt="Debugger" src="lib\media\9.png"><br>这就完成了非常基础的演示。接下来我想强调一些其他功能。<br><br>有两种不同的方式可以启动调试器：<br>
<br>一种是您在演示中已经学到的：您在调试器中运行一个 Julia 文件。
<br>第二种允许您在交互式 REPL 中调试代码。
<br><br>在我们的示例中，我们在调试器中启动了当前打开的 Julia 文件。这是启动调试器的最基本方式，但还有许多其他选项可以在 VS Code 的 launch.json 文件中配置。示例包括固定某个 Julia 文件为启动文件、配置命令行参数等。有关 launch.json 功能的更多详细描述，请参见 VS Code 调试文档。<br><br>用户可以在 REPL 中启动调试器。在这种情况下，调试器将附加到已经运行的 REPL 环境。要这样启动调试器，需要在 REPL 中使用两个宏：@enter 和 @run。这两个宏都非常简单：它们将在传递给宏代码上启动调试器。@run 将在遇到断点时运行代码，而 @enter 将在代码的第一行暂停调试器。例如，您可以通过输入 @enter println("Test") 来调试 println 函数。<br><br>您已经学会了如何轻松地在源代码中设置断点。还有两种关于断点的选项： 函数断点和条件断点。<br><br>如果您在 BREAKPOINTS 视图中单击小 + 按钮，您可以添加一个函数断点。只需输入您希望断点的函数名称即可。您还可以通过指定函数签名，例如 foo，来配置仅在特定方法上暂停运行。<br><br>如果您在编辑器中右键单击一个断点，您可以选择 Edit breakpoint... 选项，然后可以为该断点添加条件。您可以在此处输入任何返回 Bool 值的有效 Julia 表达式。您当然可以在此表达式中完全访问所有局部变量。<br><br>复合变量、数组和字典在变量查看器中具有完整的树状下拉支持：<br><img alt="Debugger" src="lib\media\11.png"><br><br>监视部分允许您输入任意 Julia 表达式，这些表达式将在程序暂停时进行计算并显示结果：<br><img alt="Debugger" src="lib\media\12.png"><br><br>调用堆栈部分允许您查看任何堆栈帧的内容，即当您单击另一个函数时，它将显示所选堆栈帧的局部变量。您还可以通过单击此处给定条目旁的小重启图标重新启动代码执行：<br><img alt="Debugger" src="lib\media\13.png"><br>请注意，这最后一项功能可能比较脆弱，特别是当您的函数修改任何全局状态时。<br><br>如果您的代码引发异常，您将看到一个漂亮的异常视图：<br>您还可以在 UI 的 BREAKPOINTS 部分配置调试器在异常发生时的行为。<br><br>断点视图还有一个选项称为启用编译模式：<br><img alt="Debugger" src="lib\media\14.png"><br>此选项的功能如下：<br>如果您选择此选项，则在当前堆栈帧中调用的任何函数中设置的断点将不再暂停代码执行。在我们的示例中，如果您在函数 foo 中暂停，然后选择此选项，bar 中的断点将不再暂停执行。foo 中的断点仍将暂停调试器。<br>您为什么会想使用此功能？<br>启用此选项后，您的代码将运行得更快。<br>Important
这个功能的使用实践，应该执行。
<br><br>如果您在使用调试器时遇到任何问题，请随时在 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/julia-vscode" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/julia-vscode" target="_blank">Julia VS Code</a> 存储库中告知我们。<br><br><br>为了使调试器运行得更快，我们希望最小化被解释的包/模块数量。 假设您需要调试您编写的代码，但也需要使用包 Statistics 提供的功能。 单击调试器默认编译扩展设置。
<img alt="Debugger" src="lib\media\16.png"><br>将此设置配置如下：<br>"julia.debuggerDefaultCompiled": [    
        "ALL_MODULES_EXCEPT_MAIN",   
        "-Statistics.",     
    ]
复制<br>ALL_MODULES_EXCEPT_MAIN 将使所有模块以编译模式运行，除了包含您编写代码的 Main 模块。我们还使用 "-Statistics." 将此模块及其所有子模块从编译模块列表中移除，以便它们将被解释。<br><br>调试时也可以使用自定义的 Julia sys 镜像。转到 julia-vscode 扩展设置并单击编辑Additional Args。<br><img alt="Debugger" src="lib\media\17.png"><br>Once in the settings, use "-J" option followed by your path to the custom sys image. Note this "Additional Args" settings are currently used only when debugging in the REPL mode, see the @run macron in the example bellow.进入设置后，使用 "-J" 选项，后跟自定义 sys 镜像的路径。请注意，此 Additional Args 设置当前仅在 REPL 模式下调试时使用，参见下面的 @run 宏示例。<br>"julia.additionalArgs": [
        "-JC:\\temp\\sys_custom.so",
    ],
复制<br><br>在以下代码中，我们使用了 GLMakie 和 Statistics 包。GLMakie 是一个绘图库，已知在 Julia 1.9 之前的版本中首次绘图的时间（TTFP）相对较慢。在调试时，解释 GLMakie 显然不是我们想要的事情。通过上述设置，GLMakie 被设置为以编译模式运行，我们还从 sys 镜像加载它。确保您在 REPL 模式下使用 @run 宏与您的根函数进行调试。<br><img alt="Debugger" src="lib\media\18.png"><br>当调试器到达指定的代码行时，我们可以进入 mean 函数（来自 Statistics 包）并在其中进行调试。<br><img alt="Debugger" src="lib\media\19.png">]]></description><link>src\userguide\debugging.html</link><guid isPermaLink="false">src/userguide/debugging.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:20 GMT</pubDate><enclosure url="lib\media\3.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\3.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[代码编辑]]></title><description><![CDATA[ 
 <br><br><br>您可以使用 IntelliSense 来补全代码。
<img alt="code completion" src="lib\media\completion.gif"><br>显示参数信息：  <br><img alt="signature completion" src="lib\media\signature.gif"><br>列出结构体的成员等等。<br><br>您可以通过按  F2 或右键点击 -&gt; "Rename Symbol"来重命名符号（变量名、函数名等）。<br><img alt="Rename Symbol" src="lib\media\rename_symbol.gif">]]></description><link>src\userguide\editingcode.html</link><guid isPermaLink="false">src/userguide/editingcode.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:20 GMT</pubDate><enclosure url="lib\media\completion.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\completion.gif&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Julia 环境]]></title><description><![CDATA[ 
 <br><br>Julia VSCode 扩展支持管理和切换当前的 Julia 环境。你可以点击如下所示的 “Julia env” 按钮来选择你想使用的环境：<br><img alt="Env selection" src="lib\media\env-select.png"><br>如果你当前的目录（在 VSCode 左侧显示）包含一个 Julia 环境，并且你尝试切换到另一个环境，系统将提示你如下信息：<br><img alt="Alternate Env selection" src="lib\media\alt-env-select.png">]]></description><link>src\userguide\env.html</link><guid isPermaLink="false">src/userguide/env.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:21 GMT</pubDate><enclosure url="lib\media\env-select.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\env-select.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[代码格式化]]></title><description><![CDATA[ 
 <br><br>代码格式化由 <a data-tooltip-position="top" aria-label="https://github.com/domluna/JuliaFormatter.jl" rel="noopener nofollow" class="external-link" href="https://github.com/domluna/JuliaFormatter.jl" target="_blank">JuliaFormatter.jl</a> 提供支持。支持 格式化文档 命令（Ctrl-Shift-I）和 格式化选择（Ctrl-K Ctrl-F）。<br>默认的格式化设置相对保守且不具侵入性，但你可以在工作区中使用 .JuliaFormatter.toml 文件进行自定义。可以查看 <a data-tooltip-position="top" aria-label="https://domluna.github.io/JuliaFormatter.jl/stable/" rel="noopener nofollow" class="external-link" href="https://domluna.github.io/JuliaFormatter.jl/stable/" target="_blank">相关文档</a>。注意： 与 <a data-tooltip-position="top" aria-label="https://domluna.github.io/JuliaFormatter.jl/stable/config/#Configuration-File" rel="noopener nofollow" class="external-link" href="https://domluna.github.io/JuliaFormatter.jl/stable/config/#Configuration-File" target="_blank">JuliaFormatter.jl 的标准搜索规则</a> 不同，VSCode 仅会检查工作区内的 .JuliaFormatter.toml 文件。<br>格式化有助于通过自动对齐缩进和空格来保持代码的可读性。<br>Julia 格式化工具可以自动将以下代码：<br>f(x)=2x+3
print(f'( 2 ))

open("myfile.txt", "w") do io
	write(io, "Hello world!")
    end;
复制<br>格式化为：<br>f(x) = 2x + 3
print(f'(2))

open("myfile.txt", "w") do io
    write(io, "Hello world!")
end;
复制<br>代码保持不变，但后者更易于阅读。<br>要格式化代码，请按 Shift + Cmd | Windows + P 打开命令面板，然后搜索Format Document<br><img alt="format" src="lib\media\format.png">]]></description><link>src\userguide\formatter.html</link><guid isPermaLink="false">src/userguide/formatter.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:21 GMT</pubDate><enclosure url="lib\media\format.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\format.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[表格查看器]]></title><description><![CDATA[ 
 <br><br>所有兼容 <a data-tooltip-position="top" aria-label="https://github.com/JuliaData/Tables.jl" rel="noopener nofollow" class="external-link" href="https://github.com/JuliaData/Tables.jl" target="_blank">Tables.jl</a> 的表格（以及更多！）都可以在集成的表格查看器中显示。<br>你可以使用导出的 vscodedisplay 函数直接显示对象，或者在工作区中使用 Open in VS Code 按钮：<br><img alt="table viewer" src="lib\media\table.png"><br>vscodedisplay 还接受一个可选的第二个参数，可以设置标签页标题。<br>表格可以在用户界面中进行过滤和排序，尽管对于中等大小的表格，这可能会比较慢，而对于大表格（超过 1e7 个元素）则会被禁用。<br>请注意，按照上述定义，非大表格是被缓存的。因此，原始数据结构的更改在再次显示表格之前不会反映在表格查看器中。<br>一个稍微隐藏的功能是，你可以选择行并使用 Ctrl-C 或上下文菜单将其复制到剪贴板。请注意，当选择多行时，这将会比较慢。]]></description><link>src\userguide\grid.html</link><guid isPermaLink="false">src/userguide/grid.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:21 GMT</pubDate><enclosure url="lib\media\table.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\table.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[键盘快捷键]]></title><description><![CDATA[ 
 <br><br>以下是三个不同平台的键盘快捷键参考。<br><br><br><br><br><br>]]></description><link>src\userguide\keybindings.html</link><guid isPermaLink="false">src/userguide/keybindings.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:21 GMT</pubDate></item><item><title><![CDATA[代码检查与诊断]]></title><description><![CDATA[ 
 <br><br>工作区中的所有 Julia 代码都会进行静态检查。您可以通过 julia.lint.run 设置禁用此功能，或通过各种带 julia.lint. 前缀的选项来配置它。<br><br>像 <a data-tooltip-position="top" aria-label="https://github.com/aviatesk/JET.jl" rel="noopener nofollow" class="external-link" href="https://github.com/aviatesk/JET.jl" target="_blank">JET.jl</a> 这样的包可以在运行时分析代码（在某种意义上的“运行时”）：
<img alt="jet" src="lib\media\jet.png"><br>您可以通过 julia.showRuntimeDiagnostics 设置选择关闭此功能。使用 Julia: Clear Runtime Diagnostics 或  Julia: Clear Runtime Diagnostics by Provider 清除显示的诊断信息。<br>希望使用此功能的包作者可以简单地实现一个支持 application/vnd.julia-vscode.diagnostics MIME 类型的类型。有关 API 的更多信息，请检查集成的 Julia REPL 中的 VSCodeServer.DIAGNOSTIC_MIME。]]></description><link>src\userguide\linter.html</link><guid isPermaLink="false">src/userguide/linter.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:22 GMT</pubDate><enclosure url="lib\media\jet.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\jet.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[绘图]]></title><description><![CDATA[ 
 <br><br>Julia 的 Plots 提供了创建数据可视化的能力。<br><br>首先，打开 Julia 终端（也称为 REPL），您可以按照 <a data-tooltip-position="top" aria-label="https://www.julia-vscode.org/docs/stable/userguide/runningcode/#The-Julia-REPL-1" rel="noopener nofollow" class="external-link" href="https://www.julia-vscode.org/docs/stable/userguide/runningcode/#The-Julia-REPL-1" target="_blank">这里</a> 的步骤进行操作。<br>在 REPL 窗口的 Julia 提示符下，输入以下内容：<br>julia&gt; using Pkg
复制<br>这将告诉 Julia 您将使用包管理器。<br>然后输入以下内容以添加 Plots 包：<br>julia&gt; Pkg.add("Plots")
复制<br><br>记得保持 REPL 打开，因为程序的任何输出都将在此处打印。<br>您需要执行的第一段代码是：<br>using Plots
复制<br>这告诉 Julia 加载我们将用于创建可视化的库。<br><br>让我们通过一个简单的程序来理解这一点：<br>编写以下代码：<br>using Plots
x = 1:10; y = rand(10); # These are the plotting data
plot(x,y, label="my label")
复制<br>现在运行这段代码，您可以按照 <a data-tooltip-position="top" aria-label="https://www.julia-vscode.org/docs/stable/userguide/runningcode/#Running-code-in-the-Julia-REPL-1" rel="noopener nofollow" class="external-link" href="https://www.julia-vscode.org/docs/stable/userguide/runningcode/#Running-code-in-the-Julia-REPL-1" target="_blank">这里</a> 的步骤进行操作。<br>您将会在 VS Code 中的新标签页中获得如下图形的输出：
<img alt="Plot Graph" src="lib\media\plotgraph.png">]]></description><link>src\userguide\plotgallery.html</link><guid isPermaLink="false">src/userguide/plotgallery.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:22 GMT</pubDate><enclosure url="lib\media\plotgraph.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\plotgraph.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[隐私]]></title><description><![CDATA[ 
 <br><br>您可以通过向开发团队发送使用统计数据和异常信息来帮助改善 Julia VS Code 扩展。默认情况下，不收集遥测和崩溃报告数据，用户必须选择加入才能发送其数据。<br><br>默认情况下，julia.enableTelemetry 和 julia.enableCrashReporter 的设置都为 null。在 null 设置下，不会向开发团队发送任何数据。用户界面会发送提示，询问用户是否同意启用遥测和崩溃报告的设置。如果不选择加入，您的数据不会发送给开发团队。<br><br>如果将 julia.enableTelemetry 设置为 true，则匿名的、非识别性使用和错误数据将发送给开发团队。<br>当 julia.enableCrashReporter 设置为 true 时，扩展中的错误堆栈跟踪将发送给开发团队。这些堆栈跟踪可能包含识别信息，例如文件名。<br>这些信息通过 Azure Application Insights 收集并发送。<br><br>要禁用遥测并不报告任何使用数据或崩溃报告，请将 julia.enableTelemetry 和 julia.enableCrashReporter 设置为 false。<br><br>收集的数据用于改善 Julia VS Code 扩展。我们不会出售这些信息。我们有时可能会发布匿名统计数据（例如用户数量等）。]]></description><link>src\userguide\privacy.html</link><guid isPermaLink="false">src/userguide/privacy.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:22 GMT</pubDate></item><item><title><![CDATA[代码分析]]></title><description><![CDATA[ 
 <br><br>Julia 自带 <a data-tooltip-position="top" aria-label="https://docs.julialang.org/en/v1/stdlib/Profile/" rel="noopener nofollow" class="external-link" href="https://docs.julialang.org/en/v1/stdlib/Profile/" target="_blank">采样分析器</a>，用于测量函数中消耗的 CPU 时间或分配的数量和大小。还有 <a data-tooltip-position="top" aria-label="https://github.com/timholy/FlameGraphs.jl" rel="noopener nofollow" class="external-link" href="https://github.com/timholy/FlameGraphs.jl" target="_blank">各种包</a> 可用于可视化这些分析跟踪。<br>VS Code 扩展提供了实用的宏 @profview 和 @profview_allocs 来运行这些分析器，并配有自己的分析查看器。分析来自 <a data-tooltip-position="top" aria-label="https://github.com/timholy/ProfileView.jl" rel="noopener nofollow" class="external-link" href="https://github.com/timholy/ProfileView.jl" target="_blank">ProfileView.jl 说明文档</a> 的示例函数：<br>function profile_test(n)
    for i = 1:n
        A = randn(100,100,20)
        m = maximum(A)
        Am = mapslices(sum, A; dims=2)
        B = A[:,:,5]
        Bsort = mapslices(sort, B; dims=1)
        b = rand(100)
        C = B.*b
    end
end

# compilation
@profview profile_test(1)
# pure runtime
@profview profile_test(10)
复制<br>会显示一个火焰图和内联注释：
<img alt="profiler 1" src="lib\media\profiler1.png"><br>点击火焰图中的任何元素会放大该元素；双击背景（或使用右上角的 reset view 按钮）将恢复初始视图。Ctrl-Click  以打开引用的文件。<br>工具提示将告诉您在某一帧中收集的样本数量以及最上面显示帧的百分比。有一些启发式标志，如垃圾回收、动态调度等（这些也有颜色编码）。<br><img alt="flame graph" src="lib\media\profiler2.png"><br>内联视图显示父帧的样本来自于哪一行（并在悬停在内联注释的开始时显示标志，如上所述）：<br><img alt="inline" src="lib\media\profiler3.png"><br>分配分析器工作类似，但显示的是分配的数量或大小，而不是函数中消耗的时间：<br>@profview_allocs profile_test(10) sample_rate=0.1
复制<br><img alt="allocations" src="lib\media\profiler4.png"><br>火焰图上方的菜单允许您在分配数量和分配大小之间切换。<br>请注意，可选参数 sample_rate 可用于调整收集的样本数量。样本率为 1.0 将记录所有内容；0.0 将不记录任何内容。请谨慎使用，因为较大的值可能会显著减慢代码运行速度。默认值为 0.0001；如果您知道正在发生分配但未看到有用的信息，可以逐渐增加该值。]]></description><link>src\userguide\profiler.html</link><guid isPermaLink="false">src/userguide/profiler.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:22 GMT</pubDate><enclosure url="lib\media\profiler1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\profiler1.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[远程开发]]></title><description><![CDATA[ 
 <br><br>要在远程服务器上执行代码，你需要：<br>
<br>确保你有 SSH 访问服务器权限。
<br>在本地 VS Code 中安装 <a data-tooltip-position="top" aria-label="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" rel="noopener nofollow" class="external-link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank">Remote-SSH</a> 扩展。
<br>连接 VS Code到服务器 (使用 VS Code 窗口左下角的图标:  <img alt="Icon looking like vertically misaligned &quot;><&quot;" src="lib\media\remote_icon.png">)
<br>通过 VS Code 在服务器上安装 <a data-tooltip-position="top" aria-label="https://marketplace.visualstudio.com/items?itemName=julialang.language-julia" rel="noopener nofollow" class="external-link" href="https://marketplace.visualstudio.com/items?itemName=julialang.language-julia" target="_blank">Julia 扩展</a>
<br>然后，你可以像在本地一样在服务器上执行代码：
<img alt="Example of the settings" src="lib\media\remote_extensions.png"><br><br>当你关闭 VS Code 窗口时，服务器端的 REPL 默认会终止。要使 REPL 状态在会话之间保持持久，你需要：<br>
<br>在服务器上安装 tmux，<a data-tooltip-position="top" aria-label="https://www.ocf.berkeley.edu/~ckuehl/tmux/" rel="noopener nofollow" class="external-link" href="https://www.ocf.berkeley.edu/~ckuehl/tmux/" target="_blank">一个终端复用器</a>（例如，通过 apt install tmux）
<br>在 VS Code 设置中切换 julia.persistentSession.enabled 设置。请注意，此设置仅在 Julia 扩展的服务器安装中可用，可以通过设置的 "Remote ..." 选项卡访问：
<img alt="Location of the persistent sessions setting" src="lib\media\remote_persistent_session_setting.png">
]]></description><link>src\userguide\remote.html</link><guid isPermaLink="false">src/userguide/remote.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:23 GMT</pubDate><enclosure url="lib\media\remote_icon.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\remote_icon.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[运行代码]]></title><description><![CDATA[ 
 <br><br>扩展提供了多种运行 Julia 代码的方法。本节将描述所有这些选项，除了如何在调试器中运行代码，相关内容在文档的其他部分中讨论。<br><br>默认情况下，VS Code 命令 Run: Start Without Debugging (Ctrl+F5) 会启动一个新的 Julia 实例并运行当前打开的 Julia 文件。该命令会自动为此 Julia 进程创建一个新的 VS Code 终端。<br>Note
通过此命令启动的 Julia 实例与扩展支持的 Julia REPL 完全独立。
<br>您可以通过创建 <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations" target="_blank">启动配置</a> 来轻松自定义 Run: Start Without Debugging 的行为。在许多情况下，运行当前打开的文件并不理想，而是将工作区中的某个文件配置为项目的主要入口点，在您按 Ctrl+F5 时运行该文件。<br>其他自定义选项包括 自定义工作目录、命令行参数 或 特定的 Julia 环境（与 VS Code 窗口中的活动 Julia 环境不同）。启动配置还允许您配置更复杂的执行场景，在这些场景中，通过 <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/docs/editor/debugging#_compound-launch-configurations" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/docs/editor/debugging#_compound-launch-configurations" target="_blank">复合启动配置</a> 同时启动多个 Julia 和非 Julia 脚本。<br>Julia 扩展本身支持以下启动配置属性：<br>
<br>program: 指向 .jl 文件的路径。这是在使用此启动配置时将要运行的 Julia 文件。如果未指定此属性，默认使用编辑器中当前打开的 Julia 文件。
<br>cwd: 指向文件夹的路径。据此配置启动的 Julia 进程将使用该路径作为初始工作目录。如果未指定此属性，默认使用在 VS Code 中打开的根工作文件夹。
<br>juliaEnv: 指向 Julia 项目的路径。Julia 进程将使用此 Julia 项目作为活动项目启动。如果未指定此属性，默认使用 VS Code 窗口中当前活动的 Julia 环境。
<br>args: 命令行参数的数组。在此列表中指定的值将作为命令行参数传递给启动的 Julia 进程，并可以通过 Julia 中的 Base.ARGS 变量访问。如果未指定此属性，则不会将任何命令行参数传递给 Julia 实例。
<br><br>Julia 扩展在 VS Code 内提供了一个 Julia REPL。您可以使用 Julia: Start REPL 命令启动此 REPL。<br>扩展中的 Julia REPL 与默认的 Julia REPL 相同，但增加了一些额外的集成功能（绘图面板、网格查看器、调试器等），这些功能不是标准 REPL 的一部分。请注意，只有通过 Julia: Start REPL 命令启动的 REPL 才具有这些集成功能。如果您在 VS Code 内通过系统 shell 启动 Julia，则不会提供这些集成点。<br>通过 Julia: Start REPL 命令启动的 REPL 将以当前活动工作区的根文件夹作为其工作目录，并将与当前在 VS Code 窗口中活动的 Julia 项目一起启动。<br><br>您可以使用以下四个命令在 Julia REPL 中运行来自编辑器的代码：<br>
<br>Julia: Execute Code in REPL
<br>Julia: Execute Code Cell in REPL / Julia: Execute Code Cell in REPL and Move
<br>Julia: Execute File in REPL
<br>Julia: Run File in New Process
<br><br>每当在当前活动编辑器中选择了一些 Julia 代码时，此命令将执行所选代码。如果没有选定文本，该命令将识别光标所在的顶层语言构造的范围（模块除外）并执行该代码块。<br>该命令将与执行的代码关联位置信息，include 将正确处理相对路径，宏如 @__DIR__ 和 @__FILE__ 将按预期工作。<br>对于大多数用户而言，这应成为在 REPL 中运行 Julia 代码的默认命令。<br><br>该扩展支持通过特殊格式的注释（## 或 # %%）在标准 Julia 文件中标记代码单元。## 或 # %% 中的一种注释必须出现在行首，并可以后跟文本。此命令将识别光标在活动编辑器中当前所在的代码单元，然后执行该单元中的代码。如果当前文件中未使用代码单元，它将执行整个文件。<br>代码单元分隔符可以通过用户设置 julia.cellDelimiters 指定为正则表达式。默认值为 ["^##(?!#)", "^#(\\s?)%%", "^#-"]。<br>此命令使用与 Julia: Execute Code Block 命令相同的代码执行技术。包含语句、位置信息等都按预期工作，也就是使用此命令运行的。<br>Note
Julia: Execute Code Block 命令在笔者当前的 Julia 扩展中没有找到，应该已经取消了。
<br><br>此命令在 Julia REPL 中运行当前活动文件的全部内容。它使用与 Julia: Execute Code Block 命令相同的代码执行技术。包含语句、位置信息等都按预期工作，也就是使用此命令运行的。<br><br>有时希望在新进程中运行代码（例如，如果您想确保没有先前运行的代码状态干扰），因此此命令将启动一个新的 Julia 进程并在其中运行活动文件。]]></description><link>src\userguide\runningcode.html</link><guid isPermaLink="false">src/userguide/runningcode.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:23 GMT</pubDate></item><item><title><![CDATA[Tasks]]></title><description><![CDATA[ 
 <br>]]></description><link>src\userguide\tasks.html</link><guid isPermaLink="false">src/userguide/tasks.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:23 GMT</pubDate></item><item><title><![CDATA[测试项框架]]></title><description><![CDATA[ 
 <br><br>测试项框架(test item framework)是一组软件包和用户界面功能，使编写和运行 Julia 软件包的测试变得简单。<br>该框架的主要好处在于，测试代码可以结构化为测试项，从而可以单独轻松运行这些测试项。<br>Julia VS Code 扩展对测试项框架提供了广泛支持，但测试项框架本身可以完全独立于 VS Code 使用。用户可以编写测试项并通过命令行界面（或标准的 Pkg.test 功能）运行它们，而无需使用 VS Code。<br><br>测试项框架的核心功能是可以将测试结构化为 @testitem 块，然后单独运行这些测试，而无需一次性运行所有测试。一个典型的 @testitem 可能如下所示：<br>@testitem "First tests" begin
    x = foo("bar")

    @test length(x)==3
    @test x == "bar"
end
复制<br>一个 @testitem 总是有一个名称（此处为 "First tests"），然后是一个 begin ... end 块中的代码。@testitem 内部的代码必须能够独立执行，即不能依赖于 @testitem 外部的代码，除非该代码以某种方式被显式导入或包含在 @testitem 内部。有一个例外：@testitem 内的代码将在一个临时模块内运行，其中已经执行了 using Test 和 using MYPACKAGENAME，因此可以直接使用从 Test 模块或正在开发的软件包中导出的任何内容。在上面的例子中，这适用于 foo 函数（假设在被测试的软件包中定义）和 @test 宏。<br>@testitem 可以在包中的任何地方出现。它们不必位于 test 文件夹中，也不必在 test/runtests.jl 包含的文件中。事实上，@testitem 甚至可以位于常规包代码内部，例如与正在测试的代码相邻。在这种情况下，您只需依赖于 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/TestItems.jl" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/TestItems.jl" target="_blank">TestItems.jl</a> 包，以便访问 @testitem 宏。如果您有一个名为 MyPackage 的包，则文件 src/MyPackage.jl 可以如下所示：<br>module MyPackage

using TestItems

export foo

foo(x) = x

@testitem "First tests" begin
    x = foo("bar")

    @test length(x)==3
    @test x == "bar"
end

end
复制<br>如果您不喜欢这种内联的 @testitem 风格，也可以将 @testitem 块放入测试文件夹中的 Julia 文件中。<br><br>当您在 VS Code 中打开一个 Julia 包并安装了 <a data-tooltip-position="top" aria-label="https://www.julia-vscode.org/" rel="noopener nofollow" class="external-link" href="https://www.julia-vscode.org/" target="_blank">Julia 扩展</a> 时，它会不断（每次按键后！）查找您 Julia 文件中的所有 @testitem。如果找到任何 @testitem，它们将出现在用户界面的各个位置。<br>您可以在 VS Code 的测试活动栏中找到所有检测到的 @testitem：<br><img alt="Test activity bar" src="lib\media\testactivitybar.png"><br>测试活动区域提供了运行单个 @testitem、查看结果等的选项。<br>S Code 还会在文本编辑器中每个检测到的 @testitem 旁边放置一个小的运行按钮：<br><img alt="Test run button" src="lib\media\testrunbutton.png"><br>除了所有这些允许您运行测试的 UI 元素之外，还有用于显示测试结果的 UI。例如，当您运行测试并且其中一些测试失败时，扩展将收集所有这些测试失败信息，并在代码中直接显示特定测试失败的位置：<br><img alt="Test error detail" src="lib\media\testerrordetail.png"><br>特别是在运行大量测试且测试文件较大时，这使得找到具体失败测试变得更加容易，不再需要在 REPL 中寻找文件和行信息！<br><br>您可以使用 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/TestItemRunner.jl" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/TestItemRunner.jl" target="_blank">TestItemRunner.jl</a> 包作为传统 Pkg.test 工作流的一部分来运行 @testitem。<br>要为使用 @testitem 的包启用与 Pkg.test 的集成，您只需做两件事：<br>
<br>将 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/TestItemRunner.jl" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/TestItemRunner.jl" target="_blank">TestItemRunner.jl</a> 作为测试依赖项添加到您的包中
<br>在包的 test/runtests.jl 文件中放入以下代码：
<br>using TestItemRunner

@run_package_tests
复制<br><br>现在您可以为 @testitem 添加标签。标签可以在 VS Code UI 和通过 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/TestItemRunner.jl" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/TestItemRunner.jl" target="_blank">TestItemRunner.jl</a> 中使用，以过滤您想要运行的测试项。<br>添加标签的语法如下：<br>@testitem "My testitem" tags=[:skipci, :important] begin
    x = foo("bar")

    @test length(x)==3
    @test x == "bar"
end
复制<br>然后，您可以使用这些相同的标签在 VS Code UI 中过滤测试列表：<br><img alt="Test item tags" src="lib\media\testitemtagsvscode.png"><br>您还可以在 test/runtests.jl 中使用标签，以过滤将通过传统 Pkg.test 入口点运行的测试列表：<br>using TestItemRunner

@run_package_tests filter=ti-&gt;!(:skipci in ti.tags)
复制<br>下面的 <a data-href="#TestItemRunner.jl 中的过滤支持" href="about:blank#TestItemRunner.jl 中的过滤支持" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TestItemRunner.jl 中的过滤支持</a><a data-href="#TestItemRunner.jl 中的过滤支持" href="about:blank#TestItemRunner.jl_中的过滤支持" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TestItemRunner.jl 中的过滤支持</a> 部分对 @run_package_tests 宏的新过滤关键字进行了更完整的描述。<br><br>VS Code 扩展有一个设置，控制您想要使用多少 Julia 进程进行并行测试执行：<br><img alt="Test num test processes" src="lib\media\vscodenumtestprocesses.png"><br>默认值为 1，因此您需要更改此值以使用并行测试执行功能。值为 0 将使用与您的处理器数量相同的测试进程。<br>一旦您配置了多个测试进程，单个 @testitem 将并行运行。<br>这里有一个权衡：更多的测试进程意味着需要更多内存，并且可能还会有额外的开销来启动所有进程并准备好实际运行 @testitem。<br><br>通过 VS Code 中的新测试 UI 启动的测试进程不会自动终止，即它们会保持在内存中并占用其他资源。当然，这样做有很多好处，即 @testitem 可以在测试进程启动并运行后非常快速地执行，但在某些情况下，人们可能仍希望简单地终止所有当前正在运行的测试进程。<br>为了实现这一点，所有测试进程会在 Julia 工作区中显示，旁边还有任何可能正在运行的 REPL 或 Notebook 进程。您可以通过点击 Stop Test Process 按钮来终止 Julia 测试进程。在这个截图中，有四个测试进程正在运行：<br><br>您可以将通用过滤函数传递给 @run_package_tests 宏，以选择要执行的 @testitem。上面的部分使用标签来选择要运行的测试，但您还可以根据 @testitem 定义的文件名或 @testitem 的名称进行过滤。<br>工作原理是，您可以将过滤函数传递给 @run_package_tests 宏。该过滤函数会针对项目中检测到的每个 @testitem 被调用一次，函数必须返回 true（如果该测试项应运行）或 false（如果不应运行）。@run_package_tests 将传递一个包含三个字段的命名元组给您的过滤函数，这些字段包含有关特定测试项的元信息，分别是字段 filename（定义 @testitem 的文件完整路径）、name（您定义的 @testitem 名称）和 tags（一个 Symbol 的向量）。通过这些信息，您可以编写任意复杂的过滤条件。例如，这里我过滤掉任何具有 :skipci 标签的 @testitem，并且我只运行在特定文件中定义的测试：<br>@run_package_tests filter=ti-&gt;( !(:skipci in ti.tags) &amp;&amp; endswith(ti.filename, "test_foo.jl") )
复制<br><br>当您编写 @testitem 时，默认情况下，正在测试的软件包和 Test 包通过一个隐式的 using 语句导入。在某些情况下，这可能不是您希望的，因此可以通过 default_imports 选项在每个 @testitem 级别上控制此行为，该选项接受一个 Bool 值。要禁用这些默认导入，您可以这样写：<br>@testitem "Another test for foo" default_imports=false begin
    using MyPackage, Test

    x = foo("bar")

    @test x != "bar"
end
复制<br>注意，我们现在需要手动在 @testitem 中添加行 using MyPackage, Test，以便访问 foo 函数和 @test 宏。<br><br>默认情况下，@testitem 之间不共享任何代码，且彼此之间没有依赖关系。这些特性使得独立运行 @testitem 成为可能，但有时需要在多个 @testitem 之间共享公共代码。测试项框架提供了两个宏来实现这一目的：@testsnippet 和 @testmodule。这两个宏可以出现在包中的任何 .jl 文件中。<br><br>@testsnippet 是一个代码块，单个 @testitem 可以在其自己的代码运行之前执行该代码块。如果某个 @testitem 依赖于特定的 @testsnippet，那么该片段将在每次运行 @testitem 时执行。<br>@testsnippet 的定义可能如下所示：<br>@testsnippet MySnippet begin
    foo = "Hello world"
end
复制<br>@testitem 可以通过使用 setup 关键字来利用这个片段，如下所示：<br>@testitem "My test item" setup=[MySnippet] begin
    @test foo == "Hello world"
end
复制<br><br>@testmodule 定义了一个可以从 @testitem 访问的 Julia 模块。这样的模块在每个 Julia 测试进程中只会运行 一次。例如，如果两个 @testitem 依赖于同一个 @testmodule，它将只被运行一次，然后整个模块将对两个 @testitem 可用。<br>@testmodule 的定义可能如下所示：<br>@testmodule MyModule begin
    foo = "Hello world"
end
复制<br>@testitem 可以再次使用 setup 关键字来利用这个模块。与 @testsnippet 不同的是，@testmodule 的内容在一个常规的 Julia module 中运行，因此要访问其中的内容，需要在测试模块定义的名称前加上模块名。利用刚刚定义的 @testmodule 的 @testitem 可能如下所示：<br>@testitem "My test item" setup=[MyModule] begin
    @test MyModule.foo == "Hello world"
end
复制<br>注意我们在这里用表达式 MyModule.foo 访问 foo。<br>Note
笔者发现，即使 @testmodule 使用 export 导出 foo 函数，@testitem 仍然不能识别 foo，且需要附加模块名。
<br><br>可以通过 Debug Test 命令在调试器中运行 @testitem。这个命令可以在 VS Code UI 的多个地方访问。可以在测试主视图中找到：<br>
<img alt="Testitem debugging 1" src="lib\media\testitemdebug1.png"><br>你也可以右击文本编辑器中的运行测试图标，选择调试选项：<br><img alt="Testitem debugging 2" src="lib\media\testitemdebug2.png"><br>当在调试器中运行测试项时，可以在被测试的代码或 @testitem 本身设置断点，然后利用 Julia VS Code 调试器的所有常规功能。<br><br>在 Julia 1.11 及更高版本中，可以在代码覆盖模式下运行测试项，并直接在 VS Code 中显示代码覆盖结果。<br>要以代码覆盖模式运行测试项，可以使用 Run Tests with Coverage 命令启动。该命令在主测试视图：<br><img alt="Testitem coverage 1" src="lib\media\testitemcoverage1.png"><br>和文本编辑器的右键菜单中都可用：<br><img alt="Testitem coverage 2" src="lib\media\testitemcoverage2.png"><br>覆盖率结果会以多种方式在 VS Code UI 中显示。例如，总结视图显示每个文件的覆盖情况：<br><img alt="Testitem coverage 2" src="lib\media\testitemcoverageresultsummary.png"><br>可以在文本编辑器中看到详细的行覆盖信息：<br><img alt="Testitem coverage 2" src="lib\media\testitemcoverageresultdetail.png"><br>覆盖率结果还会在 VS Code UI 的常规资源管理器部分内联显示。]]></description><link>src\userguide\testitems.html</link><guid isPermaLink="false">src/userguide/testitems.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:24 GMT</pubDate><enclosure url="lib\media\testactivitybar.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\testactivitybar.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Understanding Code]]></title><description><![CDATA[ 
 <br>]]></description><link>src\userguide\understandingcode.html</link><guid isPermaLink="false">src/userguide/understandingcode.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:24 GMT</pubDate></item><item><title><![CDATA[Julia Markdown 文档]]></title><description><![CDATA[ 
 <br><br>该扩展支持 Weave Markdown 文档，文件扩展名为 .jmd。所有 Julia 代码评估的快捷键和命令都应正常工作，但单元格应定义为围栏的 Julia 代码块（通常的 ##/# %% 分隔符在这里没有意义）。<br>使用 Julia Weave: Open Preview 命令可以将当前文件编织为临时 HTML 文档，然后在编辑器中显示。Julia Weave: Save to File... 允许您选择输出格式，并将编织的文档保存到源文件旁边。]]></description><link>src\userguide\weave.html</link><guid isPermaLink="false">src/userguide/weave.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 12:08:24 GMT</pubDate></item><item><title><![CDATA[常见问题解答]]></title><description><![CDATA[ 
 <br><br><br>你可能遇到了如下图所示的弹窗提示：  <br><img alt="LS precompilation failure" src="src\images\precompile-failure.png"><br>点击 Open Logs 按钮，或者进入 Output &gt; Julia Language Server。你会看到类似如下的消息：<br>The Language Server failed to precompile.
Please make sure you have permissions to write to the LS depot path at
	/home/pfitzseb/.config/Code/User/globalStorage/julialang.language-julia/lsdepot/v1
复制<br>当前账户需要对指示的目录具有读/写权限。还要确保该目录不位于 NFS 卷或类似位置，因为这可能会导致问题。<br><br>当底层进程崩溃时保持集成终端打开，目前依赖于上游 VS Code 的支持。暂时，你可以尝试以下两种方案：<br>
<br>在 Linux/MacOS 上，你可以尝试使用 tmux 集成（前提是系统上已经安装了 tmux）。这样可以确保即使 Julia 进程终止，底层进程依然存活，你应能看到实际的错误信息。
<br>启动一个新终端（无论是集成的还是外部的），并在该终端手动启动 Julia。然后使用 Julia: Connect external REPL 命令并按照指示操作。在 Julia 会话连接到 VS Code 后，像以前一样运行代码；当 Julia 关闭时，终端将保持打开状态。
]]></description><link>src\faq.html</link><guid isPermaLink="false">src/faq.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 11:17:20 GMT</pubDate><enclosure url="src\images\precompile-failure.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;src\images\precompile-failure.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[入门指南]]></title><description><![CDATA[ 
 <br><br>本指南适用于刚开始接触Visual Studio Code扩展的新手或初级用户。入门任务将使用Julia编程语言在VS Code中创建一个“Hello World”程序。<br><br>
<br>Julia
<br>VS Code
<br>VS Code Julia 扩展
<br><br><br>从<a data-tooltip-position="top" aria-label="https://julialang.org/downloads/" rel="noopener nofollow" class="external-link" href="https://julialang.org/downloads/" target="_blank">Julia官网</a>下载最新版本的Julia，根据你的平台选择相应的版本。<br><br>根据你使用的平台，从<a data-tooltip-position="top" aria-label="https://code.visualstudio.com/" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/" target="_blank">VS Code官网</a>下载并安装VS Code。<br><br>
<br>启动或打开Visual Studio Code。
<br>选择 View，然后点击 Extensions 打开扩展视图.
<br>在市场搜索框中输入julia。点击绿色的安装按钮以下载并安装扩展。
<img alt="Julia VS Code Extension" src="src\assets\julia_vscode_extension.png">
<br>您已成功为VS Code下载了Julia扩展。<br>注意：建议在安装后重启VS Code。<br><br>如果你在 Mac 或 Windows 上将 Julia 安装在标准位置，或者 Julia 二进制文件位于你的 PATH 中，那么 Julia 的 VS Code 扩展会自动找到你的 Julia 安装，无需配置扩展。继续进入下一部分。<br>如果 VS Code 扩展没有自动找到 Julia 安装，或者你想使用不同于默认的 Julia 安装，请使用以下步骤进行配置。<br>
<br>将 julia.executablePath 设置为扩展应使用的 Julia 可执行文件的完整路径。
<br>要编辑你的配置设置，请在 Mac 上选择菜单 Code，或在其他系统上选择 File，然后选择 Preferences，再点击 Settings。
<br>确保用户设置中包含 julia.executablePath 设置。
<br>注意：字符串格式应遵循平台特定的约定。反斜杠 \ 是 JSON 中的转义字符，因此在 Windows 上使用 \\ 作为路径分隔符。<br><br>
<br>在文件资源管理器工具栏中，点击 Hello 文件夹上的 New File 按钮：
<br><img alt="Julia VS Code Extension" src="src\assets\hello-1.png"><br>
<br>将文件命名为 hello.jl，它将自动在编辑器中打开。
<br><img alt="Julia VS Code Extension" src="src\assets\hello-2.png"><br>.jl 文件扩展名告诉 VS Code 将此文件视为 Julia 程序，因此它会使用 Julia 扩展和所选的解释器来评估文件内容。<br>
<br>在 hello.jl 中输入以下代码：
<br>msg = "Hello World"
println(msg)
复制<br><br>要运行 Hello World 程序，请点击编辑器右上方的终端按钮 Run: Julia File。<br><img alt="Julia VS Code Extension" src="src\assets\hello-3.png"><br>你可以在终端中看到相应的输出。<br><img alt="Julia VS Code Extension" src="src\assets\hello-4.png"><br>恭喜你！你已经完成了第一个 Julia 程序。]]></description><link>src\gettingstarted.html</link><guid isPermaLink="false">src/gettingstarted.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 11:17:24 GMT</pubDate><enclosure url="src\assets\julia_vscode_extension.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;src\assets\julia_vscode_extension.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Julia Visual Studio Code 文档]]></title><description><![CDATA[ 
 <br><br>注意：此文档当前正在更新和改进中。在此期间，您可以参考 <a data-tooltip-position="top" aria-label="https://github.com/julia-vscode/julia-vscode/blob/main/CHANGELOG.md" rel="noopener nofollow" class="external-link" href="https://github.com/julia-vscode/julia-vscode/blob/main/CHANGELOG.md" target="_blank">变更日志</a> 以及其中链接的拉取请求，了解尚未记录的功能。<br>Julia for Visual Studio Code 是 Julia 语言的一个强大、免费的集成开发环境（IDE）。Visual Studio Code 是一个功能强大且可定制的编辑器。借助完全实时的环境，Julia for VS Code 致力于消除编程中的挫折感和不确定性，并让编程重新变得有趣。我们基于 Julia 独特的易用性和高性能相结合的特点，初学者和专家都能更快地构建更好的软件，并更快地取得成果。Julia 是 <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/docs/languages/julia" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/docs/languages/julia" target="_blank">VS Code 文档</a> 中官方支持的语言之一。<br><br>要安装和下载 Julia、VS Code 以及 Julia 扩展，请参阅 <a data-tooltip-position="top" aria-label="05-miscellaneous/julia-vscode/src/设置" data-href="05-miscellaneous/julia-vscode/src/设置" href="05-miscellaneous\julia-vscode\src\设置" class="internal-link" target="_self" rel="noopener nofollow">安装与配置</a> 指南。<br>Julia VS Code 扩展的发布功能可以在我们的更新页面找到。<br><br>如果你在此设置中遇到任何问题，首先查看 <a data-href="常见问题解答" href="常见问题解答" class="internal-link" target="_self" rel="noopener nofollow">常见问题解答</a>。 如果它不能解决问题，请在 vscode.jl GitHub 仓库或 Julia Discourse 的 Tooling ▶ VS Code版块报告，我们会尽力帮助你解决问题。<br><br>以下页面是用户手册。这些页面介绍了如何在 VS Code 上安装和使用 Julia 扩展，并解答大多数新用户遇到的问题。]]></description><link>src\index.html</link><guid isPermaLink="false">src/index.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 11:17:29 GMT</pubDate></item><item><title><![CDATA[设置]]></title><description><![CDATA[ 
 <br><br>要使 Julia 扩展在 VS Code 中正常工作，涉及两个步骤：<br>
<br>安装 VS Code，然后，
<br>安装 Julia 扩展。
<br>在极少数情况下，你还需要配置扩展以找到你的 Julia 安装路径。<br><br>
<br>直接前往 <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/" rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/" target="_blank">VS Code</a> 官方主页。
<br>根据你的平台，按照安装说明进行操作。
<br>完成此步骤后，你应该能够启动 VS Code。<br><br>
<br>首先，启动 VS Code。
<br>在 VS Code 内，可以通过执行 View: Show Extensions 命令（点击“视图”-&gt;“命令面板...”），或通过点击 VS Code 窗口左侧的扩展图标来打开扩展视图。
<br>在扩展视图中，简单地在市场搜索框中搜索 julia，然后选择 Julia 扩展并点击安装按钮。
<br>在此步骤之后，你可能需要重新启动 VS Code。
<br><br>
<br>
如果你在 Mac 或 Windows 系统上将 Julia 安装在标准位置，或者 Julia 的二进制文件位于你的 PATH 中，Julia VS Code 扩展应自动找到你的 Julia 安装，你不需要进行任何配置。

<br>
如果扩展无法自动找到你的 Julia 安装，或者你希望使用不同的 Julia 安装版本，

<br>你可以将 julia.executablePath 设置为扩展应该使用的 Julia 可执行文件的完整路径。在这种情况下，扩展将始终使用该 Julia 版本。
<br>要编辑配置设置，

<br>执行 Preferences: Open User Settings 命令（你也可以通过菜单“文件”-&gt;“首选项”-&gt;“设置”来访问它），
<br>然后确保你的用户设置中包含 julia.executablePath 选项。




<br>字符串的格式应遵循平台的具体规范，请注意，在 JSON 中反斜杠 \ 是转义字符，因此你需要在 Windows 上使用 \\ 作为路径分隔符。]]></description><link>src\setup.html</link><guid isPermaLink="false">src/setup.md</guid><dc:creator><![CDATA[Jinze Li]]></dc:creator><pubDate>Thu, 31 Oct 2024 11:59:09 GMT</pubDate></item></channel></rss>