var documenterSearchIndex = {"docs":
[{"location":"userguide/codenavigation.html#代码导航","page":"代码导航","title":"代码导航","text":"","category":"section"},{"location":"userguide/codenavigation.html#快速文件导航","page":"代码导航","title":"快速文件导航","text":"","category":"section"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"提示：按住 Ctrl+P (快速打开) 以按名称打开任何文件。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"有两个命令可以让用户轻松使用快捷键在文件内外进行导航。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"按住 Ctrl 并按 Tab 可以查看在编辑器中打开的所有文件列表。\n要打开其中一个文件，再次按 Tab 选择你想导航到的文件，然后释放 Ctrl 以打开它。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"(Image: Code Navigation)","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"或者，你可以使用 Alt+Left 和 Alt+Right 在文件和编辑位置之间导航。如果你在同一文件的不同行之间跳转，这些快捷键可以让你轻松导航到这些位置。","category":"page"},{"location":"userguide/codenavigation.html#打开包目录","page":"代码导航","title":"打开包目录","text":"","category":"section"},{"location":"userguide/codenavigation.html#跳转到定义","page":"代码导航","title":"跳转到定义","text":"","category":"section"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"你可以按 F12 跳转到符号的定义。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"如果你按住 Ctrl 并悬停在某个符号上，声明的预览将会出现：","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"(Image: )","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"提示：你可以使用 Ctrl+Click 跳转到定义，或者使用 Ctrl+Alt+Click 在侧边打开定义。","category":"page"},{"location":"userguide/codenavigation.html#跳转到符号","page":"代码导航","title":"跳转到符号","text":"","category":"section"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"你可以使用 Ctrl+Shift+O 在文件内导航符号。输入 : 后，符号将按类别分组。按 Up 或 Down 键导航到你想要的位置。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"(Image: )","category":"page"},{"location":"userguide/codenavigation.html#按名称打开符号","page":"代码导航","title":"按名称打开符号","text":"","category":"section"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"你可以使用 Ctrl+T 按符号名称打开特定符号，无论它位于哪个文件中。输入你想导航到的符号名称，然后按 Enter。","category":"page"},{"location":"userguide/codenavigation.html","page":"代码导航","title":"代码导航","text":"(Image: Open Symbol)","category":"page"},{"location":"userguide/understandingcode.html#Understanding-Code","page":"Understanding Code","title":"Understanding Code","text":"","category":"section"},{"location":"setup.html#设置","page":"设置","title":"设置","text":"","category":"section"},{"location":"setup.html","page":"设置","title":"设置","text":"要使 Julia扩展在 VS Code 中正常工作，涉及两个步骤：","category":"page"},{"location":"setup.html","page":"设置","title":"设置","text":"安装 VS Code，然后，\n安装 Julia扩展。","category":"page"},{"location":"setup.html","page":"设置","title":"设置","text":"在极少数情况下，你还需要配置扩展以找到你的 Julia 安装路径。","category":"page"},{"location":"setup.html#安装-VS-Code","page":"设置","title":"安装 VS Code","text":"","category":"section"},{"location":"setup.html","page":"设置","title":"设置","text":"直接前往 VS Code 官方主页。\n根据你的平台，按照安装说明进行操作。","category":"page"},{"location":"setup.html","page":"设置","title":"设置","text":"完成此步骤后，你应该能够启动 VS Code。","category":"page"},{"location":"setup.html#安装-Julia-扩展","page":"设置","title":"安装 Julia 扩展","text":"","category":"section"},{"location":"setup.html","page":"设置","title":"设置","text":"首先，启动 VS Code。\n在 VS Code 内，可以通过执行 View: Show Extensions 命令（点击“视图”->“命令面板...”），或通过点击 VS Code 窗口左侧的扩展图标来打开扩展视图。\n在扩展视图中，简单地在市场搜索框中搜索 julia，然后选择Julia 扩展并点击安装按钮。\n在此步骤之后，你可能需要重新启动 VS Code。","category":"page"},{"location":"setup.html#配置-Julia-扩展","page":"设置","title":"配置 Julia 扩展","text":"","category":"section"},{"location":"setup.html","page":"设置","title":"设置","text":"如果你在 Mac 或 Windows 系统上将 Julia 安装在标准位置，或者 Julia 的二进制文件位于你的 PATH 中，Julia VS Code 扩展应自动找到你的 Julia 安装，你不需要进行任何配置。\n如果扩展无法自动找到你的 Julia 安装，或者你希望使用不同的 Julia 安装版本，","category":"page"},{"location":"setup.html","page":"设置","title":"设置","text":"- 你可以将 `julia.executablePath` 设置为扩展应该使用的 Julia 可执行文件的完整路径。在这种情况下，扩展将始终使用该 Julia 版本。\n- 要编辑配置设置，\n    - 执行 `Preferences: Open User Settings` 命令（你也可以通过菜单“文件”->“首选项”->“设置”来访问它），\n    - 然后确保你的用户设置中包含 `julia.executablePath` 选项。","category":"page"},{"location":"setup.html","page":"设置","title":"设置","text":"字符串的格式应遵循平台的具体规范，请注意，在 JSON 中反斜杠 \\ 是转义字符，因此你需要在 Windows 上使用 \\\\ 作为路径分隔符。","category":"page"},{"location":"userguide/debugging.html#调试","page":"调试","title":"调试","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"Julia 扩展支持Julia 程序和应用的所有类型的调试。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"有关检查变量、设置断点等与语言无关的一般调试功能，请查看 VS Code 调试。","category":"page"},{"location":"userguide/debugging.html#示例","page":"调试","title":"示例","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"在 VS Code 中打开一个 Julia 文件。\n点击 run 按钮。您将看到默认的调试器启动面板：\n点击 run and debug（或选择 F5）以在调试器中运行当前活动的 Julia 文件。输出将在 Julia 调试终端中显示。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"在此例中，整个程序一次性运行并完成，没有出现问题。让我们通过在第 11 行设置一个断点来使这个示例更有用。我们只需在代码编辑器的最左侧列上单击即可：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"红点表明我们现在已经设置了一个断点。接下来，我们重新启动程序（可以通过单击 run and debug 或按 F5）。当程序到达第 11 行时，它将暂停：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"黄色行显示了如果继续运行程序将要执行的位置。我们还可以查看调用堆栈的位置和所有断点的列表。在文本编辑器顶部，我们现在看到一个工具条，包含常用调试操作的命令：Continue, Step over, Step Into, Step Out 等。 让我们单击一次 Step Over 然后单击 Step Into。我们现在在 bar 函数的第一行暂停：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"Variables 视图现在显示我们在此函数中拥有的局部变量及其当前值。当我们逐步执行程序并最终到达 bar 函数的末尾时，局部变量的列表变得更长，即我们现在还可以看到 c 和 d 的值：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"让我们在第 15 行再设置一个断点，然后继续程序直到它到达该断点。然后我们单击 Debug Console，看到如下视图：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"在此视图中，我们可以在当前函数的变量环境中计算任意合法的 Julia 代码。例如，我们可以通过运行 log(x) 来计算变量 x 的对数值：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"我们还可以在程序暂停时更改任何局部变量的值。例如，要更改 x 的值，我们可以在 Variables 窗口双击 27 旁边的 x，然后输入任意合法的 Julia 表达式。该表达式返回的值将成为 x 的新值。在以下示例中，我们将 x 的值更改为字符串：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"这就完成了非常基础的演示。接下来我想强调一些其他功能。","category":"page"},{"location":"userguide/debugging.html#启动调试器的方式","page":"调试","title":"启动调试器的方式","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"有两种不同的方式可以启动调试器：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"一种是您在演示中已经学到的：您在调试器中运行一个 Julia 文件。\n第二种允许您在交互式 REPL 中调试代码。","category":"page"},{"location":"userguide/debugging.html#运行-Julia-文件","page":"调试","title":"运行 Julia 文件","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"在我们的示例中，我们在调试器中启动了当前打开的 Julia 文件。这是启动调试器的最基本方式，但还有许多其他选项可以在 VS Code 的 launch.json 文件中配置。示例包括固定某个 Julia 文件为启动文件、配置命令行参数等。有关 launch.json 功能的更多详细描述，请参见 VS Code 调试文档。","category":"page"},{"location":"userguide/debugging.html#从-REPL-调试代码","page":"调试","title":"从 REPL 调试代码","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"用户可以在 REPL 中启动调试器。在这种情况下，调试器将附加到已经运行的 REPL 环境。要这样启动调试器，需要在 REPL 中使用两个宏：@enter 和 @run。这两个宏都非常简单：它们将在传递给宏代码上启动调试器。@run 将在遇到断点时运行代码，而 @enter 将在代码的第一行暂停调试器。例如，您可以通过输入 @enter println(\"Test\") 来调试 println 函数。","category":"page"},{"location":"userguide/debugging.html#断点","page":"调试","title":"断点","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"您已经学会了如何轻松地在源代码中设置断点。还有两种关于断点的选项： 函数断点和条件断点。","category":"page"},{"location":"userguide/debugging.html#函数断点","page":"调试","title":"函数断点","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"如果您在 BREAKPOINTS 视图中单击小 + 按钮，您可以添加一个函数断点。只需输入您希望断点的函数名称即可。您还可以通过指定函数签名，例如 foo(:: String, ::Number)，来配置仅在特定方法上暂停运行。","category":"page"},{"location":"userguide/debugging.html#条件断点","page":"调试","title":"条件断点","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"如果您在编辑器中右键单击一个断点，您可以选择 Edit breakpoint... 选项，然后可以为该断点添加条件。您可以在此处输入任何返回 Bool 值的有效 Julia 表达式。您当然可以在此表达式中完全访问所有局部变量。","category":"page"},{"location":"userguide/debugging.html#变量查看器","page":"调试","title":"变量查看器","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"复合变量、数组和字典在变量查看器中具有完整的树状下拉支持：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html#监视部分","page":"调试","title":"监视部分","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"监视部分允许您输入任意 Julia 表达式，这些表达式将在程序暂停时进行计算并显示结果：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html#调用堆栈","page":"调试","title":"调用堆栈","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"调用堆栈部分允许您查看任何堆栈帧的内容，即当您单击另一个函数时，它将显示所选堆栈帧的局部变量。您还可以通过单击此处给定条目旁的小重启图标重新启动代码执行：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"请注意，这最后一项功能可能比较脆弱，特别是当您的函数修改任何全局状态时。","category":"page"},{"location":"userguide/debugging.html#异常","page":"调试","title":"异常","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"如果您的代码引发异常，您将看到一个漂亮的异常视图：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"您还可以在 UI 的 BREAKPOINTS 部分配置调试器在异常发生时的行为。","category":"page"},{"location":"userguide/debugging.html#编译模式","page":"调试","title":"编译模式","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"断点视图还有一个选项称为启用编译模式：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"此选项的功能如下：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"如果您选择此选项，则在当前堆栈帧中调用的任何函数中设置的断点将不再暂停代码执行。在我们的示例中，如果您在函数 foo 中暂停，然后选择此选项，bar 中的断点将不再暂停执行。foo 中的断点仍将暂停调试器。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"您为什么会想使用此功能？","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"启用此选项后，您的代码将运行得更快。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"[!important] 这个功能的使用实践，应该执行。","category":"page"},{"location":"userguide/debugging.html#故障排除","page":"调试","title":"故障排除","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"如果您在使用调试器时遇到任何问题，请随时在 Julia VS Code 存储库中告知我们。","category":"page"},{"location":"userguide/debugging.html###-加速调试的设置","page":"调试","title":"## 加速调试的设置","text":"","category":"section"},{"location":"userguide/debugging.html#ALL_MODULES_EXCEPT_MAIN","page":"调试","title":"ALL_MODULES_EXCEPT_MAIN","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"为了使调试器运行得更快，我们希望最小化被解释的包/模块数量。 假设您需要调试您编写的代码，但也需要使用包 Statistics 提供的功能。 单击调试器默认编译扩展设置。 (Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"将此设置配置如下：","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"\"julia.debuggerDefaultCompiled\": [    \n        \"ALL_MODULES_EXCEPT_MAIN\",   \n        \"-Statistics.\",     \n    ]","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"ALL_MODULES_EXCEPT_MAIN 将使所有模块以编译模式运行，除了包含您编写代码的 Main 模块。我们还使用 \"-Statistics.\" 将此模块及其所有子模块从编译模块列表中移除，以便它们将被解释。","category":"page"},{"location":"userguide/debugging.html#使用自定义-sys-镜像","page":"调试","title":"使用自定义 sys 镜像","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"调试时也可以使用自定义的 Julia sys 镜像。转到 julia-vscode 扩展设置并单击编辑Additional Args。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"Once in the settings, use \"-J\" option followed by your path to the custom sys image. Note this \"Additional Args\" settings are currently used only when debugging in the REPL mode, see the @run macron in the example bellow.进入设置后，使用 \"-J\" 选项，后跟自定义 sys 镜像的路径。请注意，此 Additional Args 设置当前仅在 REPL 模式下调试时使用，参见下面的 @run 宏示例。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"\"julia.additionalArgs\": [\n        \"-JC:\\\\temp\\\\sys_custom.so\",\n    ],","category":"page"},{"location":"userguide/debugging.html#快速调试示例","page":"调试","title":"快速调试示例","text":"","category":"section"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"在以下代码中，我们使用了 GLMakie 和 Statistics 包。GLMakie 是一个绘图库，已知在 Julia 1.9 之前的版本中首次绘图的时间（TTFP）相对较慢。在调试时，解释 GLMakie 显然不是我们想要的事情。通过上述设置，GLMakie 被设置为以编译模式运行，我们还从 sys 镜像加载它。确保您在 REPL 模式下使用 @run 宏与您的根函数进行调试。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"当调试器到达指定的代码行时，我们可以进入 mean 函数（来自 Statistics 包）并在其中进行调试。","category":"page"},{"location":"userguide/debugging.html","page":"调试","title":"调试","text":"(Image: Debugger)","category":"page"},{"location":"userguide/formatter.html#代码格式化","page":"代码格式化","title":"代码格式化","text":"","category":"section"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"代码格式化由 JuliaFormatter.jl 提供支持。支持 格式化文档 命令（Ctrl-Shift-I）和 格式化选择（Ctrl-K Ctrl-F）。","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"默认的格式化设置相对保守且不具侵入性，但你可以在工作区中使用 .JuliaFormatter.toml 文件进行自定义。可以查看 相关文档。注意： 与 JuliaFormatter.jl 的标准搜索规则 不同，VSCode 仅会检查工作区内的 .JuliaFormatter.toml 文件。","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"格式化有助于通过自动对齐缩进和空格来保持代码的可读性。","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"Julia 格式化工具可以自动将以下代码：","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"f(x)=2x+3\nprint(f'( 2 ))\n\nopen(\"myfile.txt\", \"w\") do io\n\twrite(io, \"Hello world!\")\n    end;","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"格式化为：","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"f(x) = 2x + 3\nprint(f'(2))\n\nopen(\"myfile.txt\", \"w\") do io\n    write(io, \"Hello world!\")\nend;","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"代码保持不变，但后者更易于阅读。","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"要格式化代码，请按 Shift + Cmd | Windows + P 打开命令面板，然后搜索Format Document","category":"page"},{"location":"userguide/formatter.html","page":"代码格式化","title":"代码格式化","text":"(Image: format)","category":"page"},{"location":"userguide/settings.html#设置","page":"设置","title":"设置","text":"","category":"section"},{"location":"userguide/grid.html#表格查看器","page":"表格查看","title":"表格查看器","text":"","category":"section"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"所有兼容 Tables.jl 的表格（以及更多！）都可以在集成的表格查看器中显示。","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"你可以使用导出的 vscodedisplay 函数直接显示对象，或者在工作区中使用 Open in VS Code 按钮：","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"(Image: table viewer)","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"vscodedisplay 还接受一个可选的第二个参数，可以设置标签页标题。","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"表格可以在用户界面中进行过滤和排序，尽管对于中等大小的表格，这可能会比较慢，而对于大表格（超过 1e7 个元素）则会被禁用。","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"请注意，按照上述定义，非大表格是被缓存的。因此，原始数据结构的更改在再次显示表格之前不会反映在表格查看器中。","category":"page"},{"location":"userguide/grid.html","page":"表格查看","title":"表格查看","text":"一个稍微隐藏的功能是，你可以选择行并使用 Ctrl-C 或上下文菜单将其复制到剪贴板。请注意，当选择多行时，这将会比较慢。","category":"page"},{"location":"userguide/testitems.html#测试项框架","page":"测试项框架","title":"测试项框架","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"测试项框架(test item framework)是一组软件包和用户界面功能，使编写和运行 Julia 软件包的测试变得简单。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"该框架的主要好处在于，测试代码可以结构化为测试项，从而可以单独轻松运行这些测试项。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"Julia VS Code 扩展对测试项框架提供了广泛支持，但测试项框架本身可以完全独立于 VS Code 使用。用户可以编写测试项并通过命令行界面（或标准的 Pkg.test 功能）运行它们，而无需使用 VS Code。","category":"page"},{"location":"userguide/testitems.html#编写测试项","page":"测试项框架","title":"编写测试项","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"测试项框架的核心功能是可以将测试结构化为 @testitem 块，然后单独运行这些测试，而无需一次性运行所有测试。一个典型的 @testitem 可能如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem \"First tests\" begin\n    x = foo(\"bar\")\n\n    @test length(x)==3\n    @test x == \"bar\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"一个 @testitem 总是有一个名称（此处为 \"First tests\"），然后是一个 begin ... end 块中的代码。@testitem 内部的代码必须能够独立执行，即不能依赖于 @testitem 外部的代码，除非该代码以某种方式被显式导入或包含在 @testitem 内部。有一个例外：@testitem 内的代码将在一个临时模块内运行，其中已经执行了 using Test 和 using MYPACKAGENAME，因此可以直接使用从 Test 模块或正在开发的软件包中导出的任何内容。在上面的例子中，这适用于 foo 函数（假设在被测试的软件包中定义）和 @test 宏。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem 可以在包中的任何地方出现。它们不必位于 test 文件夹中，也不必在 test/runtests.jl 包含的文件中。事实上，@testitem 甚至可以位于常规包代码内部，例如与正在测试的代码相邻。在这种情况下，您只需依赖于 TestItems.jl 包，以便访问 @testitem 宏。如果您有一个名为 MyPackage 的包，则文件 src/MyPackage.jl 可以如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"module MyPackage\n\nusing TestItems\n\nexport foo\n\nfoo(x) = x\n\n@testitem \"First tests\" begin\n    x = foo(\"bar\")\n\n    @test length(x)==3\n    @test x == \"bar\"\nend\n\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"如果您不喜欢这种内联的 @testitem 风格，也可以将 @testitem 块放入测试文件夹中的 Julia 文件中。","category":"page"},{"location":"userguide/testitems.html#在-VS-Code-中运行测试项","page":"测试项框架","title":"在 VS Code 中运行测试项","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"当您在 VS Code 中打开一个 Julia 包并安装了 Julia 扩展 时，它会不断（每次按键后！）查找您 Julia 文件中的所有 @testitem。如果找到任何 @testitem，它们将出现在用户界面的各个位置。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"您可以在 VS Code 的测试活动栏中找到所有检测到的 @testitem：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Test activity bar)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"测试活动区域提供了运行单个 @testitem、查看结果等的选项。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"S Code 还会在文本编辑器中每个检测到的 @testitem 旁边放置一个小的运行按钮：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Test run button)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"除了所有这些允许您运行测试的 UI 元素之外，还有用于显示测试结果的 UI。例如，当您运行测试并且其中一些测试失败时，扩展将收集所有这些测试失败信息，并在代码中直接显示特定测试失败的位置：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Test error detail)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"特别是在运行大量测试且测试文件较大时，这使得找到具体失败测试变得更加容易，不再需要在 REPL 中寻找文件和行信息！","category":"page"},{"location":"userguide/testitems.html#从命令行运行测试","page":"测试项框架","title":"从命令行运行测试","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"您可以使用 TestItemRunner.jl 包作为传统 Pkg.test 工作流的一部分来运行 @testitem。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"要为使用 @testitem 的包启用与 Pkg.test 的集成，您只需做两件事：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"将 TestItemRunner.jl 作为测试依赖项添加到您的包中\n在包的 test/runtests.jl 文件中放入以下代码：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"using TestItemRunner\n\n@run_package_tests","category":"page"},{"location":"userguide/testitems.html#标签","page":"测试项框架","title":"标签","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"现在您可以为 @testitem 添加标签。标签可以在 VS Code UI 和通过 TestItemRunner.jl 中使用，以过滤您想要运行的测试项。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"添加标签的语法如下：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem \"My testitem\" tags=[:skipci, :important] begin\n    x = foo(\"bar\")\n\n    @test length(x)==3\n    @test x == \"bar\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"然后，您可以使用这些相同的标签在 VS Code UI 中过滤测试列表：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Test item tags)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"您还可以在 test/runtests.jl 中使用标签，以过滤将通过传统 Pkg.test 入口点运行的测试列表：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"using TestItemRunner\n\n@run_package_tests filter=ti->!(:skipci in ti.tags)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"下面的 [[#TestItemRunner.jl 中的过滤支持]] 部分对 @run_package_tests 宏的新过滤关键字进行了更完整的描述。","category":"page"},{"location":"userguide/testitems.html#在-VS-Code-中并行执行测试","page":"测试项框架","title":"在 VS Code 中并行执行测试","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"VS Code 扩展有一个设置，控制您想要使用多少 Julia 进程进行并行测试执行：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Test num test processes)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"默认值为 1，因此您需要更改此值以使用并行测试执行功能。值为 0 将使用与您的处理器数量相同的测试进程。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"一旦您配置了多个测试进程，单个 @testitem 将并行运行。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"这里有一个权衡：更多的测试进程意味着需要更多内存，并且可能还会有额外的开销来启动所有进程并准备好实际运行 @testitem。","category":"page"},{"location":"userguide/testitems.html#管理测试进程","page":"测试项框架","title":"管理测试进程","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"通过 VS Code 中的新测试 UI 启动的测试进程不会自动终止，即它们会保持在内存中并占用其他资源。当然，这样做有很多好处，即 @testitem 可以在测试进程启动并运行后非常快速地执行，但在某些情况下，人们可能仍希望简单地终止所有当前正在运行的测试进程。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"为了实现这一点，所有测试进程会在 Julia 工作区中显示，旁边还有任何可能正在运行的 REPL 或 Notebook 进程。您可以通过点击 Stop Test Process 按钮来终止 Julia 测试进程。在这个截图中，有四个测试进程正在运行：","category":"page"},{"location":"userguide/testitems.html#TestItemRunner.jl-中的过滤支持","page":"测试项框架","title":"TestItemRunner.jl 中的过滤支持","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"您可以将通用过滤函数传递给 @run_package_tests 宏，以选择要执行的 @testitem。上面的部分使用标签来选择要运行的测试，但您还可以根据 @testitem 定义的文件名或 @testitem 的名称进行过滤。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"工作原理是，您可以将过滤函数传递给 @run_package_tests 宏。该过滤函数会针对项目中检测到的每个 @testitem 被调用一次，函数必须返回 true（如果该测试项应运行）或 false（如果不应运行）。@run_package_tests 将传递一个包含三个字段的命名元组给您的过滤函数，这些字段包含有关特定测试项的元信息，分别是字段 filename（定义 @testitem 的文件完整路径）、name（您定义的 @testitem 名称）和 tags（一个 Symbol 的向量）。通过这些信息，您可以编写任意复杂的过滤条件。例如，这里我过滤掉任何具有 :skipci 标签的 @testitem，并且我只运行在特定文件中定义的测试：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@run_package_tests filter=ti->( !(:skipci in ti.tags) && endswith(ti.filename, \"test_foo.jl\") )","category":"page"},{"location":"userguide/testitems.html#默认导入选项","page":"测试项框架","title":"默认导入选项","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"当您编写 @testitem 时，默认情况下，正在测试的软件包和 Test 包通过一个隐式的 using 语句导入。在某些情况下，这可能不是您希望的，因此可以通过 default_imports 选项在每个 @testitem 级别上控制此行为，该选项接受一个 Bool 值。要禁用这些默认导入，您可以这样写：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem \"Another test for foo\" default_imports=false begin\n    using MyPackage, Test\n\n    x = foo(\"bar\")\n\n    @test x != \"bar\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"注意，我们现在需要手动在 @testitem 中添加行 using MyPackage, Test，以便访问 foo 函数和 @test 宏。","category":"page"},{"location":"userguide/testitems.html#在-@testitem-之间共享代码","page":"测试项框架","title":"在 @testitem 之间共享代码","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"默认情况下，@testitem 之间不共享任何代码，且彼此之间没有依赖关系。这些特性使得独立运行 @testitem 成为可能，但有时需要在多个 @testitem 之间共享公共代码。测试项框架提供了两个宏来实现这一目的：@testsnippet 和 @testmodule。这两个宏可以出现在包中的任何 .jl 文件中。","category":"page"},{"location":"userguide/testitems.html#测试片段","page":"测试项框架","title":"测试片段","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testsnippet 是一个代码块，单个 @testitem 可以在其自己的代码运行之前执行该代码块。如果某个 @testitem 依赖于特定的 @testsnippet，那么该片段将在每次运行 @testitem 时执行。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testsnippet 的定义可能如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testsnippet MySnippet begin\n    foo = \"Hello world\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem 可以通过使用 setup 关键字来利用这个片段，如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem \"My test item\" setup=[MySnippet] begin\n    @test foo == \"Hello world\"\nend","category":"page"},{"location":"userguide/testitems.html#测试模块","page":"测试项框架","title":"测试模块","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testmodule 定义了一个可以从 @testitem 访问的 Julia 模块。这样的模块在每个 Julia 测试进程中只会运行 一次。例如，如果两个 @testitem 依赖于同一个 @testmodule，它将只被运行一次，然后整个模块将对两个 @testitem 可用。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testmodule 的定义可能如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testmodule MyModule begin\n    foo = \"Hello world\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem 可以再次使用 setup 关键字来利用这个模块。与 @testsnippet 不同的是，@testmodule 的内容在一个常规的 Julia module 中运行，因此要访问其中的内容，需要在测试模块定义的名称前加上模块名。利用刚刚定义的 @testmodule 的 @testitem 可能如下所示：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"@testitem \"My test item\" setup=[MyModule] begin\n    @test MyModule.foo == \"Hello world\"\nend","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"注意我们在这里用表达式 MyModule.foo 访问 foo。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"[!note] 笔者发现，即使 @testmodule 使用 export 导出 foo 函数，@testitem 仍然不能识别 foo，且需要附加模块名。","category":"page"},{"location":"userguide/testitems.html#@testitem-的调试","page":"测试项框架","title":"@testitem 的调试","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"可以通过 Debug Test 命令在调试器中运行 @testitem。这个命令可以在 VS Code UI 的多个地方访问。可以在测试主视图中找到：   (Image: Testitem debugging 1)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"你也可以右击文本编辑器中的运行测试图标，选择调试选项：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Testitem debugging 2)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"当在调试器中运行测试项时，可以在被测试的代码或 @testitem 本身设置断点，然后利用 Julia VS Code 调试器的所有常规功能。","category":"page"},{"location":"userguide/testitems.html#代码覆盖率","page":"测试项框架","title":"代码覆盖率","text":"","category":"section"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"在 Julia 1.11 及更高版本中，可以在代码覆盖模式下运行测试项，并直接在 VS Code 中显示代码覆盖结果。","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"要以代码覆盖模式运行测试项，可以使用 Run Tests with Coverage 命令启动。该命令在主测试视图：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Testitem coverage 1)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"和文本编辑器的右键菜单中都可用：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Testitem coverage 2)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"覆盖率结果会以多种方式在 VS Code UI 中显示。例如，总结视图显示每个文件的覆盖情况：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Testitem coverage 2)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"可以在文本编辑器中看到详细的行覆盖信息：","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"(Image: Testitem coverage 2)","category":"page"},{"location":"userguide/testitems.html","page":"测试项框架","title":"测试项框架","text":"覆盖率结果还会在 VS Code UI 的常规资源管理器部分内联显示。","category":"page"},{"location":"userguide/editingcode.html#代码编辑","page":"代码编辑","title":"代码编辑","text":"","category":"section"},{"location":"userguide/editingcode.html#代码补全-(IntelliSense)","page":"代码编辑","title":"代码补全 (IntelliSense)","text":"","category":"section"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"您可以使用 IntelliSense 来补全代码。 (Image: code completion)","category":"page"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"显示参数信息：  ","category":"page"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"(Image: signature completion)","category":"page"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"列出结构体的成员等等。","category":"page"},{"location":"userguide/editingcode.html#重命名符号","page":"代码编辑","title":"重命名符号","text":"","category":"section"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"您可以通过按  F2 或右键点击 -> \"Rename Symbol\"来重命名符号（变量名、函数名等）。","category":"page"},{"location":"userguide/editingcode.html","page":"代码编辑","title":"代码编辑","text":"(Image: Rename Symbol)","category":"page"},{"location":"faq.html#常见问题解答","page":"常见问题","title":"常见问题解答","text":"","category":"section"},{"location":"faq.html#语言服务器无法预编译。我该怎么办？","page":"常见问题","title":"语言服务器无法预编译。我该怎么办？","text":"","category":"section"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"你可能遇到了如下图所示的弹窗提示：  ","category":"page"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"(Image: LS precompilation failure)","category":"page"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"点击 Open Logs 按钮，或者进入 Output > Julia Language Server。你会看到类似如下的消息：","category":"page"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"The Language Server failed to precompile.\nPlease make sure you have permissions to write to the LS depot path at\n\t/home/pfitzseb/.config/Code/User/globalStorage/julialang.language-julia/lsdepot/v1","category":"page"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"当前账户需要对指示的目录具有读/写权限。还要确保该目录不位于 NFS 卷或类似位置，因为这可能会导致问题。","category":"page"},{"location":"faq.html#当-Julia-进程崩溃时，集成的-REPL-会关闭。我如何获取更多信息？","page":"常见问题","title":"当 Julia 进程崩溃时，集成的 REPL 会关闭。我如何获取更多信息？","text":"","category":"section"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"当底层进程崩溃时保持集成终端打开，目前依赖于上游 VS Code 的支持。暂时，你可以尝试以下两种方案：","category":"page"},{"location":"faq.html","page":"常见问题","title":"常见问题","text":"在 Linux/MacOS 上，你可以尝试使用 tmux 集成（前提是系统上已经安装了 tmux）。这样可以确保即使 Julia 进程终止，底层进程依然存活，你应能看到实际的错误信息。\n启动一个新终端（无论是集成的还是外部的），并在该终端手动启动 Julia。然后使用 Julia: Connect external REPL 命令并按照指示操作。在 Julia 会话连接到 VS Code 后，像以前一样运行代码；当 Julia 关闭时，终端将保持打开状态。","category":"page"},{"location":"gettingstarted.html#入门指南","page":"入门指南","title":"入门指南","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"本指南适用于刚开始接触Visual Studio Code扩展的新手或初级用户。入门任务将使用Julia编程语言在VS Code中创建一个“Hello World”程序。","category":"page"},{"location":"gettingstarted.html#先决条件","page":"入门指南","title":"先决条件","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"Julia\nVS Code\nVS Code Julia 扩展","category":"page"},{"location":"gettingstarted.html#安装与配置","page":"入门指南","title":"安装与配置","text":"","category":"section"},{"location":"gettingstarted.html#安装Julia","page":"入门指南","title":"安装Julia","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"从Julia官网下载最新版本的Julia，根据你的平台选择相应的版本。","category":"page"},{"location":"gettingstarted.html#安装VS-Code","page":"入门指南","title":"安装VS Code","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"根据你使用的平台，从VS Code官网下载并安装VS Code。","category":"page"},{"location":"gettingstarted.html#安装Julia扩展","page":"入门指南","title":"安装Julia扩展","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"启动或打开Visual Studio Code。\n选择 View，然后点击 Extensions 打开扩展视图.\n在市场搜索框中输入julia。点击绿色的安装按钮以下载并安装扩展。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"您已成功为VS Code下载了Julia扩展。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"注意：建议在安装后重启VS Code。","category":"page"},{"location":"gettingstarted.html#配置Julia扩展","page":"入门指南","title":"配置Julia扩展","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"如果你在 Mac 或 Windows 上将 Julia 安装在标准位置，或者 Julia 二进制文件位于你的 PATH 中，那么 Julia 的 VS Code 扩展会自动找到你的 Julia 安装，无需配置扩展。继续进入下一部分。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"如果 VS Code 扩展没有自动找到 Julia 安装，或者你想使用不同于默认的 Julia 安装，请使用以下步骤进行配置。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"将 julia.executablePath 设置为扩展应使用的 Julia 可执行文件的完整路径。\n要编辑你的配置设置，请在 Mac 上选择菜单 Code，或在其他系统上选择 File，然后选择 Preferences，再点击 Settings。\n确保用户设置中包含 julia.executablePath 设置。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"注意：字符串格式应遵循平台特定的约定。反斜杠 \\ 是 JSON 中的转义字符，因此在 Windows 上使用 \\\\ 作为路径分隔符。","category":"page"},{"location":"gettingstarted.html#创建您的第一个-Julia-Hello-World-程序","page":"入门指南","title":"创建您的第一个 Julia Hello World 程序","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"在文件资源管理器工具栏中，点击 Hello 文件夹上的 New File 按钮：","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"将文件命名为 hello.jl，它将自动在编辑器中打开。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":".jl 文件扩展名告诉 VS Code 将此文件视为 Julia 程序，因此它会使用 Julia 扩展和所选的解释器来评估文件内容。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"在 hello.jl 中输入以下代码：","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"msg = \"Hello World\"\nprintln(msg)","category":"page"},{"location":"gettingstarted.html#运行-Hello-World-程序","page":"入门指南","title":"运行 Hello World 程序","text":"","category":"section"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"要运行 Hello World 程序，请点击编辑器右上方的终端按钮 Run: Julia File。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"你可以在终端中看到相应的输出。","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted.html","page":"入门指南","title":"入门指南","text":"恭喜你！你已经完成了第一个 Julia 程序。","category":"page"},{"location":"userguide/tasks.html#Tasks","page":"Tasks","title":"Tasks","text":"","category":"section"},{"location":"userguide/plotgallery.html#绘图","page":"绘图","title":"绘图","text":"","category":"section"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"Julia 的 Plots 提供了创建数据可视化的能力。","category":"page"},{"location":"userguide/plotgallery.html#安装-Plots-包","page":"绘图","title":"安装 Plots 包","text":"","category":"section"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"首先，打开 Julia 终端（也称为 REPL），您可以按照 这里 的步骤进行操作。","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"在 REPL 窗口的 Julia 提示符下，输入以下内容：","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"julia> using Pkg","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"这将告诉 Julia 您将使用包管理器。","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"然后输入以下内容以添加 Plots 包：","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"julia> Pkg.add(\"Plots\")","category":"page"},{"location":"userguide/plotgallery.html#创建可视化","page":"绘图","title":"创建可视化","text":"","category":"section"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"记得保持 REPL 打开，因为程序的任何输出都将在此处打印。","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"您需要执行的第一段代码是：","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"using Plots","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"这告诉 Julia 加载我们将用于创建可视化的库。","category":"page"},{"location":"userguide/plotgallery.html#示例","page":"绘图","title":"示例","text":"","category":"section"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"让我们通过一个简单的程序来理解这一点：","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"编写以下代码：","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"using Plots\nx = 1:10; y = rand(10); # These are the plotting data\nplot(x,y, label=\"my label\")","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"现在运行这段代码，您可以按照 这里 的步骤进行操作。","category":"page"},{"location":"userguide/plotgallery.html","page":"绘图","title":"绘图","text":"您将会在 VS Code 中的新标签页中获得如下图形的输出： (Image: Plot Graph)","category":"page"},{"location":"userguide/linter.html#代码检查与诊断","page":"代码检查器","title":"代码检查与诊断","text":"","category":"section"},{"location":"userguide/linter.html","page":"代码检查器","title":"代码检查器","text":"工作区中的所有 Julia 代码都会进行静态检查。您可以通过 julia.lint.run 设置禁用此功能，或通过各种带 julia.lint. 前缀的选项来配置它。","category":"page"},{"location":"userguide/linter.html#运行时诊断","page":"代码检查器","title":"运行时诊断","text":"","category":"section"},{"location":"userguide/linter.html","page":"代码检查器","title":"代码检查器","text":"像 JET.jl 这样的包可以在运行时分析代码（在某种意义上的“运行时”）： (Image: jet)","category":"page"},{"location":"userguide/linter.html","page":"代码检查器","title":"代码检查器","text":"您可以通过 julia.showRuntimeDiagnostics 设置选择关闭此功能。使用 Julia: Clear Runtime Diagnostics 或  Julia: Clear Runtime Diagnostics by Provider 清除显示的诊断信息。","category":"page"},{"location":"userguide/linter.html","page":"代码检查器","title":"代码检查器","text":"希望使用此功能的包作者可以简单地实现一个支持 application/vnd.julia-vscode.diagnostics MIME 类型的类型。有关 API 的更多信息，请检查集成的 Julia REPL 中的 VSCodeServer.DIAGNOSTIC_MIME。","category":"page"},{"location":"userguide/profiler.html#代码分析","page":"代码分析","title":"代码分析","text":"","category":"section"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"Julia 自带 采样分析器，用于测量函数中消耗的 CPU 时间或分配的数量和大小。还有 各种包 可用于可视化这些分析跟踪。","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"VS Code 扩展提供了实用的宏 @profview 和 @profview_allocs 来运行这些分析器，并配有自己的分析查看器。分析来自 ProfileView.jl 说明文档 的示例函数：","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"function profile_test(n)\n    for i = 1:n\n        A = randn(100,100,20)\n        m = maximum(A)\n        Am = mapslices(sum, A; dims=2)\n        B = A[:,:,5]\n        Bsort = mapslices(sort, B; dims=1)\n        b = rand(100)\n        C = B.*b\n    end\nend\n\n# compilation\n@profview profile_test(1)\n# pure runtime\n@profview profile_test(10)","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"会显示一个火焰图和内联注释： (Image: profiler 1)","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"点击火焰图中的任何元素会放大该元素；双击背景（或使用右上角的 reset view 按钮）将恢复初始视图。Ctrl-Click 以打开引用的文件。","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"工具提示将告诉您在某一帧中收集的样本数量以及最上面显示帧的百分比。有一些启发式标志，如垃圾回收、动态调度等（这些也有颜色编码）。","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"(Image: flame graph)","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"内联视图显示父帧的样本来自于哪一行（并在悬停在内联注释的开始时显示标志，如上所述）：","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"(Image: inline)","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"分配分析器工作类似，但显示的是分配的数量或大小，而不是函数中消耗的时间：","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"@profview_allocs profile_test(10) sample_rate=0.1","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"(Image: allocations)","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"火焰图上方的菜单允许您在分配数量和分配大小之间切换。","category":"page"},{"location":"userguide/profiler.html","page":"代码分析","title":"代码分析","text":"请注意，可选参数 sample_rate 可用于调整收集的样本数量。样本率为 1.0 将记录所有内容；0.0 将不记录任何内容。请谨慎使用，因为较大的值可能会显著减慢代码运行速度。默认值为 0.0001；如果您知道正在发生分配但未看到有用的信息，可以逐渐增加该值。","category":"page"},{"location":"userguide/keybindings.html#键盘快捷键","page":"快捷键与命名","title":"键盘快捷键","text":"","category":"section"},{"location":"userguide/keybindings.html","page":"快捷键与命名","title":"快捷键与命名","text":"以下是三个不同平台的键盘快捷键参考。","category":"page"},{"location":"userguide/keybindings.html#Windows","page":"快捷键与命名","title":"Windows","text":"","category":"section"},{"location":"userguide/keybindings.html","page":"快捷键与命名","title":"快捷键与命名","text":"快捷键 描述 \nAlt + E Julia: 更改当前环境 \nAlt + O Julia: 启动 REPL \nAlt + K Julia: 停止 REPL \nCtrl + Enter Julia: 发送当前行或选择的代码到 REPL \nAlt + Enter Julia: 执行代码并移动 \nRightArrow, DownArrow, PageDown Julia: 显示下一个图形 \nLeftArrow, UpArrow, PageUp Julia: 显示上一个图形 \nHome Julia: 显示第一个图形 \nEnd Julia: 显示最后一个图形 \nShift + Delete Julia: 删除所有图形 \nAlt + Enter Julia: 执行代码单元 \nAlt + Shift + Enter Julia: 执行代码单元并移动 \nCtrl + C Julia: 清除编辑器中的内联结果 \nCtrl + D Julia: 清除当前内联结果 \nAlt + M Julia: 选择当前模块 ","category":"page"},{"location":"userguide/keybindings.html#Mac","page":"快捷键与命名","title":"Mac","text":"","category":"section"},{"location":"userguide/keybindings.html","page":"快捷键与命名","title":"快捷键与命名","text":"Shortcut Description\nOption + E Julia: Change Current Environment\nOption + O Julia: Start REPL\nOption + K Julia: Stop REPL\nControl + Enter Julia: Send Current Line or Selection to REPL\nOption + Enter Julia: Execute Code And Move\nRightArrow, DownArrow, PageDown Julia: Show Next Plot\nLeftArrow, UpArrow, PageUp Julia: Show Previous Plot\nHome Julia: Show First Plot\nEnd Julia: Show Last Plot\nShift + Delete Julia: Delete All Plots\nOption + Enter Julia: Execute Code Cell\nOption + Shift + Enter Julia: Execute Code Cell And Move\nControl + C Julia: Clear Inline Results in Editor\nControl + D Julia: Clear Current Inline Result\nOption + M Julia: Select Current Module","category":"page"},{"location":"userguide/keybindings.html#Linux","page":"快捷键与命名","title":"Linux","text":"","category":"section"},{"location":"userguide/keybindings.html","page":"快捷键与命名","title":"快捷键与命名","text":"Shortcut Description\nAlt + E Julia: Change Current Environment\nAlt + O Julia: Start REPL\nAlt + K Julia: Stop REPL\nCtrl + Enter Julia: Send Current Line or Selection to REPL\nAlt + Enter Julia: Execute Code And Move\nRightArrow, DownArrow, PageDown Julia: Show Next Plot\nLeftArrow, UpArrow, PageUp Julia: Show Previous Plot\nHome Julia: Show First Plot\nEnd Julia: Show Last Plot\nShift + Delete Julia: Delete All Plots\nAlt + Enter Julia: Execute Code Cell\nShift + Alt + Enter Julia: Execute Code Cell And Move\nCtrl + C Julia: Clear Inline Results in Editor\nCtrl + D Julia: Clear Current Inline Result\nAlt + M Julia: Select Current Module","category":"page"},{"location":"devdocs/devdocs.html#Developer-Documentation","page":"概况","title":"Developer Documentation","text":"","category":"section"},{"location":"userguide/env.html#Julia-环境","page":"Julia环节","title":"Julia 环境","text":"","category":"section"},{"location":"userguide/env.html","page":"Julia环节","title":"Julia环节","text":"Julia VSCode 扩展支持管理和切换当前的 Julia 环境。你可以点击如下所示的 “Julia env” 按钮来选择你想使用的环境：","category":"page"},{"location":"userguide/env.html","page":"Julia环节","title":"Julia环节","text":"(Image: Env selection)","category":"page"},{"location":"userguide/env.html","page":"Julia环节","title":"Julia环节","text":"如果你当前的目录（在 VSCode 左侧显示）包含一个 Julia 环境，并且你尝试切换到另一个环境，系统将提示你如下信息：","category":"page"},{"location":"userguide/env.html","page":"Julia环节","title":"Julia环节","text":"(Image: Alternate Env selection)","category":"page"},{"location":"userguide/weave.html#Julia-Markdown-文档","page":"Julia的Markdown文档","title":"Julia Markdown 文档","text":"","category":"section"},{"location":"userguide/weave.html","page":"Julia的Markdown文档","title":"Julia的Markdown文档","text":"该扩展支持 Weave Markdown 文档，文件扩展名为 .jmd。所有 Julia 代码评估的快捷键和命令都应正常工作，但单元格应定义为围栏的 Julia 代码块（通常的 ##/# %% 分隔符在这里没有意义）。","category":"page"},{"location":"userguide/weave.html","page":"Julia的Markdown文档","title":"Julia的Markdown文档","text":"使用 Julia Weave: Open Preview 命令可以将当前文件编织为临时 HTML 文档，然后在编辑器中显示。Julia Weave: Save to File... 允许您选择输出格式，并将编织的文档保存到源文件旁边。","category":"page"},{"location":"userguide/remote.html#远程开发","page":"远程","title":"远程开发","text":"","category":"section"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"要在远程服务器上执行代码，你需要：","category":"page"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"确保你有 SSH 访问服务器权限。\n在本地 VS Code 中安装 Remote-SSH 扩展。\n连接 VS Code到服务器 (使用 VS Code 窗口左下角的图标:  (Image: Icon looking like vertically misaligned \"><\"))\n通过 VS Code 在服务器上安装 Julia 扩展","category":"page"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"然后，你可以像在本地一样在服务器上执行代码： (Image: Example of the settings)","category":"page"},{"location":"userguide/remote.html#持久化服务器会话","page":"远程","title":"持久化服务器会话","text":"","category":"section"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"当你关闭 VS Code 窗口时，服务器端的 REPL 默认会终止。要使 REPL 状态在会话之间保持持久，你需要：","category":"page"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"在服务器上安装 tmux，一个终端复用器（例如，通过 apt install tmux）\n在 VS Code 设置中切换 julia.persistentSession.enabled 设置。请注意，此设置仅在 Julia 扩展的服务器安装中可用，可以通过设置的 \"Remote ...\" 选项卡访问：","category":"page"},{"location":"userguide/remote.html","page":"远程","title":"远程","text":"(Image: Location of the persistent sessions setting)","category":"page"},{"location":"index.html#Julia-Visual-Studio-Code-文档","page":"主页","title":"Julia Visual Studio Code 文档","text":"","category":"section"},{"location":"index.html","page":"主页","title":"主页","text":"注意：此文档当前正在更新和改进中。在此期间，您可以参考 变更日志 以及其中链接的拉取请求，了解尚未记录的功能。","category":"page"},{"location":"index.html","page":"主页","title":"主页","text":"Julia for Visual Studio Code 是 Julia 语言的一个强大、免费的集成开发环境（IDE）。Visual Studio Code 是一个功能强大且可定制的编辑器。借助完全实时的环境，Julia for VS Code 致力于消除编程中的挫折感和不确定性，并让编程重新变得有趣。我们基于 Julia 独特的易用性和高性能相结合的特点，初学者和专家都能更快地构建更好的软件，并更快地取得成果。Julia 是 VS Code 文档 中官方支持的语言之一。","category":"page"},{"location":"index.html#安装/更新","page":"主页","title":"安装/更新","text":"","category":"section"},{"location":"index.html","page":"主页","title":"主页","text":"要安装和下载 Julia、VS Code 以及 Julia 扩展，请参阅 [[05-miscellaneous/julia-vscode/src/设置|安装与配置]] 指南。","category":"page"},{"location":"index.html","page":"主页","title":"主页","text":"Julia VS Code 扩展的发布功能可以在我们的更新页面找到。","category":"page"},{"location":"index.html#报告问题/错误/讨论","page":"主页","title":"报告问题/错误/讨论","text":"","category":"section"},{"location":"index.html","page":"主页","title":"主页","text":"如果你在此设置中遇到任何问题，首先查看 [[常见问题解答]]。 如果它不能解决问题，请在 vscode.jl GitHub 仓库或 Julia Discourse 的 Tooling ▶ VS Code版块报告，我们会尽力帮助你解决问题。","category":"page"},{"location":"index.html#用户手册","page":"主页","title":"用户手册","text":"","category":"section"},{"location":"index.html","page":"主页","title":"主页","text":"以下页面是用户手册。这些页面介绍了如何在 VS Code 上安装和使用 Julia 扩展，并解答大多数新用户遇到的问题。","category":"page"},{"location":"userguide/privacy.html#隐私","page":"隐私","title":"隐私","text":"","category":"section"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"您可以通过向开发团队发送使用统计数据和异常信息来帮助改善 Julia VS Code 扩展。默认情况下，不收集遥测和崩溃报告数据，用户必须选择加入才能发送其数据。","category":"page"},{"location":"userguide/privacy.html#选择加入政策","page":"隐私","title":"选择加入政策","text":"","category":"section"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"默认情况下，julia.enableTelemetry 和 julia.enableCrashReporter 的设置都为 null。在 null 设置下，不会向开发团队发送任何数据。用户界面会发送提示，询问用户是否同意启用遥测和崩溃报告的设置。如果不选择加入，您的数据不会发送给开发团队。","category":"page"},{"location":"userguide/privacy.html#收集数据","page":"隐私","title":"收集数据","text":"","category":"section"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"如果将 julia.enableTelemetry 设置为 true，则匿名的、非识别性使用和错误数据将发送给开发团队。","category":"page"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"当 julia.enableCrashReporter 设置为 true 时，扩展中的错误堆栈跟踪将发送给开发团队。这些堆栈跟踪可能包含识别信息，例如文件名。","category":"page"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"这些信息通过 Azure Application Insights 收集并发送。","category":"page"},{"location":"userguide/privacy.html#禁用遥测","page":"隐私","title":"禁用遥测","text":"","category":"section"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"要禁用遥测并不报告任何使用数据或崩溃报告，请将 julia.enableTelemetry 和 julia.enableCrashReporter 设置为 false。","category":"page"},{"location":"userguide/privacy.html###-使用收集的数据","page":"隐私","title":"## 使用收集的数据","text":"","category":"section"},{"location":"userguide/privacy.html","page":"隐私","title":"隐私","text":"收集的数据用于改善 Julia VS Code 扩展。我们不会出售这些信息。我们有时可能会发布匿名统计数据（例如用户数量等）。","category":"page"},{"location":"userguide/runningcode.html#运行代码","page":"代码运行","title":"运行代码","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"扩展提供了多种运行 Julia 代码的方法。本节将描述所有这些选项，除了如何在调试器中运行代码，相关内容在文档的其他部分中讨论。","category":"page"},{"location":"userguide/runningcode.html#运行-Julia-文件","page":"代码运行","title":"运行 Julia 文件","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"默认情况下，VS Code 命令 Run: Start Without Debugging (Ctrl+F5) 会启动一个新的 Julia 实例并运行当前打开的 Julia 文件。该命令会自动为此 Julia 进程创建一个新的 VS Code 终端。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"[!note] 通过此命令启动的 Julia 实例与扩展支持的 Julia REPL 完全独立。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"您可以通过创建 启动配置 来轻松自定义 Run: Start Without Debugging 的行为。在许多情况下，运行当前打开的文件并不理想，而是将工作区中的某个文件配置为项目的主要入口点，在您按 Ctrl+F5 时运行该文件。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"其他自定义选项包括 自定义工作目录、命令行参数 或 特定的 Julia 环境（与 VS Code 窗口中的活动 Julia 环境不同）。启动配置还允许您配置更复杂的执行场景，在这些场景中，通过 复合启动配置 同时启动多个 Julia 和非 Julia 脚本。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"Julia 扩展本身支持以下启动配置属性：","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"program: 指向 .jl 文件的路径。这是在使用此启动配置时将要运行的 Julia 文件。如果未指定此属性，默认使用编辑器中当前打开的 Julia 文件。\ncwd: 指向文件夹的路径。据此配置启动的 Julia 进程将使用该路径作为初始工作目录。如果未指定此属性，默认使用在 VS Code 中打开的根工作文件夹。\njuliaEnv: 指向 Julia 项目的路径。Julia 进程将使用此 Julia 项目作为活动项目启动。如果未指定此属性，默认使用 VS Code 窗口中当前活动的 Julia 环境。\nargs: 命令行参数的数组。在此列表中指定的值将作为命令行参数传递给启动的 Julia 进程，并可以通过 Julia 中的 Base.ARGS 变量访问。如果未指定此属性，则不会将任何命令行参数传递给 Julia 实例。","category":"page"},{"location":"userguide/runningcode.html#Julia-REPL","page":"代码运行","title":"Julia REPL","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"Julia 扩展在 VS Code 内提供了一个 Julia REPL。您可以使用 Julia: Start REPL 命令启动此 REPL。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"扩展中的 Julia REPL 与默认的 Julia REPL 相同，但增加了一些额外的集成功能（绘图面板、网格查看器、调试器等），这些功能不是标准 REPL 的一部分。请注意，只有通过 Julia: Start REPL 命令启动的 REPL 才具有这些集成功能。如果您在 VS Code 内通过系统 shell 启动 Julia，则不会提供这些集成点。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"通过 Julia: Start REPL 命令启动的 REPL 将以当前活动工作区的根文件夹作为其工作目录，并将与当前在 VS Code 窗口中活动的 Julia 项目一起启动。","category":"page"},{"location":"userguide/runningcode.html#在-Julia-REPL-中运行代码","page":"代码运行","title":"在 Julia REPL 中运行代码","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"您可以使用以下四个命令在 Julia REPL 中运行来自编辑器的代码：","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"Julia: Execute Code in REPL\nJulia: Execute Code Cell in REPL / Julia: Execute Code Cell in REPL and Move\nJulia: Execute File in REPL\nJulia: Run File in New Process","category":"page"},{"location":"userguide/runningcode.html#Julia:-Execute-Code-in-REPL","page":"代码运行","title":"Julia: Execute Code in REPL","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"每当在当前活动编辑器中选择了一些 Julia 代码时，此命令将执行所选代码。如果没有选定文本，该命令将识别光标所在的顶层语言构造的范围（模块除外）并执行该代码块。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"该命令将与执行的代码关联位置信息，include 将正确处理相对路径，宏如 @__DIR__ 和 @__FILE__ 将按预期工作。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"对于大多数用户而言，这应成为在 REPL 中运行 Julia 代码的默认命令。","category":"page"},{"location":"userguide/runningcode.html#Julia:-Execute-Code-Cell-in-REPL","page":"代码运行","title":"Julia: Execute Code Cell in REPL","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"该扩展支持通过特殊格式的注释（## 或 # %%）在标准 Julia 文件中标记代码单元。## 或 # %% 中的一种注释必须出现在行首，并可以后跟文本。此命令将识别光标在活动编辑器中当前所在的代码单元，然后执行该单元中的代码。如果当前文件中未使用代码单元，它将执行整个文件。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"代码单元分隔符可以通过用户设置 julia.cellDelimiters 指定为正则表达式。默认值为 [\"^##(?!#)\", \"^#(\\\\s?)%%\", \"^#-\"]。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"此命令使用与 Julia: Execute Code Block 命令相同的代码执行技术。包含语句、位置信息等都按预期工作，也就是使用此命令运行的。","category":"page"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"[!note] Julia: Execute Code Block 命令在笔者当前的 Julia 扩展中没有找到，应该已经取消了。","category":"page"},{"location":"userguide/runningcode.html#Julia:-Execute-File-in-REPL","page":"代码运行","title":"Julia: Execute File in REPL","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"此命令在 Julia REPL 中运行当前活动文件的全部内容。它使用与 Julia: Execute Code Block 命令相同的代码执行技术。包含语句、位置信息等都按预期工作，也就是使用此命令运行的。","category":"page"},{"location":"userguide/runningcode.html#Julia:-Run-File-in-New-Process","page":"代码运行","title":"Julia: Run File in New Process","text":"","category":"section"},{"location":"userguide/runningcode.html","page":"代码运行","title":"代码运行","text":"有时希望在新进程中运行代码（例如，如果您想确保没有先前运行的代码状态干扰），因此此命令将启动一个新的 Julia 进程并在其中运行活动文件。","category":"page"}]
}
